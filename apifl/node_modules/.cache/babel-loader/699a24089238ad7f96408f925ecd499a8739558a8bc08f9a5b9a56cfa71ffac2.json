{"ast":null,"code":"// src/suspense.ts\nvar defaultThrowOnError = (_error, query) => typeof query.state.data === \"undefined\";\nvar ensureStaleTime = defaultedOptions => {\n  if (defaultedOptions.suspense) {\n    if (typeof defaultedOptions.staleTime !== \"number\") {\n      defaultedOptions.staleTime = 1e3;\n    }\n  }\n};\nvar willFetch = (result, isRestoring) => result.isLoading && result.isFetching && !isRestoring;\nvar shouldSuspend = (defaultedOptions, result) => defaultedOptions?.suspense && result.isPending;\nvar fetchOptimistic = (defaultedOptions, observer, errorResetBoundary) => observer.fetchOptimistic(defaultedOptions).catch(() => {\n  errorResetBoundary.clearReset();\n});\nexport { defaultThrowOnError, ensureStaleTime, fetchOptimistic, shouldSuspend, willFetch };","map":{"version":3,"names":["defaultThrowOnError","_error","query","state","data","ensureStaleTime","defaultedOptions","suspense","staleTime","willFetch","result","isRestoring","isLoading","isFetching","shouldSuspend","isPending","fetchOptimistic","observer","errorResetBoundary","catch","clearReset"],"sources":["C:\\Users\\kishl\\Downloads\\code_oin\\apifl\\node_modules\\@tanstack\\react-query\\src\\suspense.ts"],"sourcesContent":["import type { DefaultError } from '@tanstack/query-core'\nimport type {\n  DefaultedQueryObserverOptions,\n  Query,\n  QueryKey,\n  QueryObserver,\n  QueryObserverResult,\n} from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\n\nexport const defaultThrowOnError = <\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  _error: TError,\n  query: Query<TQueryFnData, TError, TData, TQueryKey>,\n) => typeof query.state.data === 'undefined'\n\nexport const ensureStaleTime = (\n  defaultedOptions: DefaultedQueryObserverOptions<any, any, any, any, any>,\n) => {\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly mounting after suspending\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000\n    }\n  }\n}\n\nexport const willFetch = (\n  result: QueryObserverResult<any, any>,\n  isRestoring: boolean,\n) => result.isLoading && result.isFetching && !isRestoring\n\nexport const shouldSuspend = (\n  defaultedOptions:\n    | DefaultedQueryObserverOptions<any, any, any, any, any>\n    | undefined,\n  result: QueryObserverResult<any, any>,\n) => defaultedOptions?.suspense && result.isPending\n\nexport const fetchOptimistic = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  defaultedOptions: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) =>\n  observer.fetchOptimistic(defaultedOptions).catch(() => {\n    errorResetBoundary.clearReset()\n  })\n"],"mappings":";AAUO,IAAMA,mBAAA,GAAsBA,CAMjCC,MAAA,EACAC,KAAA,KACG,OAAOA,KAAA,CAAMC,KAAA,CAAMC,IAAA,KAAS;AAE1B,IAAMC,eAAA,GACXC,gBAAA,IACG;EACH,IAAIA,gBAAA,CAAiBC,QAAA,EAAU;IAG7B,IAAI,OAAOD,gBAAA,CAAiBE,SAAA,KAAc,UAAU;MAClDF,gBAAA,CAAiBE,SAAA,GAAY;IAC/B;EACF;AACF;AAEO,IAAMC,SAAA,GAAYA,CACvBC,MAAA,EACAC,WAAA,KACGD,MAAA,CAAOE,SAAA,IAAaF,MAAA,CAAOG,UAAA,IAAc,CAACF,WAAA;AAExC,IAAMG,aAAA,GAAgBA,CAC3BR,gBAAA,EAGAI,MAAA,KACGJ,gBAAA,EAAkBC,QAAA,IAAYG,MAAA,CAAOK,SAAA;AAEnC,IAAMC,eAAA,GAAkBA,CAO7BV,gBAAA,EAOAW,QAAA,EACAC,kBAAA,KAEAD,QAAA,CAASD,eAAA,CAAgBV,gBAAgB,EAAEa,KAAA,CAAM,MAAM;EACrDD,kBAAA,CAAmBE,UAAA,CAAW;AAChC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}