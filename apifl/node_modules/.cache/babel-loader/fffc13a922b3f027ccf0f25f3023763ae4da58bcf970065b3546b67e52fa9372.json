{"ast":null,"code":"// src/mutation.ts\nimport { notifyManager } from \"./notifyManager.js\";\nimport { Removable } from \"./removable.js\";\nimport { canFetch, createRetryer } from \"./retryer.js\";\nvar Mutation = class extends Removable {\n  constructor(config) {\n    super();\n    this.mutationId = config.mutationId;\n    this.#defaultOptions = config.defaultOptions;\n    this.#mutationCache = config.mutationCache;\n    this.#observers = [];\n    this.state = config.state || getDefaultState();\n    this.setOptions(config.options);\n    this.scheduleGc();\n  }\n  #observers;\n  #defaultOptions;\n  #mutationCache;\n  #retryer;\n  setOptions(options) {\n    this.options = {\n      ...this.#defaultOptions,\n      ...options\n    };\n    this.updateGcTime(this.options.gcTime);\n  }\n  get meta() {\n    return this.options.meta;\n  }\n  addObserver(observer) {\n    if (!this.#observers.includes(observer)) {\n      this.#observers.push(observer);\n      this.clearGcTimeout();\n      this.#mutationCache.notify({\n        type: \"observerAdded\",\n        mutation: this,\n        observer\n      });\n    }\n  }\n  removeObserver(observer) {\n    this.#observers = this.#observers.filter(x => x !== observer);\n    this.scheduleGc();\n    this.#mutationCache.notify({\n      type: \"observerRemoved\",\n      mutation: this,\n      observer\n    });\n  }\n  optionalRemove() {\n    if (!this.#observers.length) {\n      if (this.state.status === \"pending\") {\n        this.scheduleGc();\n      } else {\n        this.#mutationCache.remove(this);\n      }\n    }\n  }\n  continue() {\n    return this.#retryer?.continue() ??\n    // continuing a mutation assumes that variables are set, mutation must have been dehydrated before\n    this.execute(this.state.variables);\n  }\n  async execute(variables) {\n    const executeMutation = () => {\n      this.#retryer = createRetryer({\n        fn: () => {\n          if (!this.options.mutationFn) {\n            return Promise.reject(new Error(\"No mutationFn found\"));\n          }\n          return this.options.mutationFn(variables);\n        },\n        onFail: (failureCount, error) => {\n          this.#dispatch({\n            type: \"failed\",\n            failureCount,\n            error\n          });\n        },\n        onPause: () => {\n          this.#dispatch({\n            type: \"pause\"\n          });\n        },\n        onContinue: () => {\n          this.#dispatch({\n            type: \"continue\"\n          });\n        },\n        retry: this.options.retry ?? 0,\n        retryDelay: this.options.retryDelay,\n        networkMode: this.options.networkMode\n      });\n      return this.#retryer.promise;\n    };\n    const restored = this.state.status === \"pending\";\n    try {\n      if (!restored) {\n        this.#dispatch({\n          type: \"pending\",\n          variables\n        });\n        await this.#mutationCache.config.onMutate?.(variables, this);\n        const context = await this.options.onMutate?.(variables);\n        if (context !== this.state.context) {\n          this.#dispatch({\n            type: \"pending\",\n            context,\n            variables\n          });\n        }\n      }\n      const data = await executeMutation();\n      await this.#mutationCache.config.onSuccess?.(data, variables, this.state.context, this);\n      await this.options.onSuccess?.(data, variables, this.state.context);\n      await this.#mutationCache.config.onSettled?.(data, null, this.state.variables, this.state.context, this);\n      await this.options.onSettled?.(data, null, variables, this.state.context);\n      this.#dispatch({\n        type: \"success\",\n        data\n      });\n      return data;\n    } catch (error) {\n      try {\n        await this.#mutationCache.config.onError?.(error, variables, this.state.context, this);\n        await this.options.onError?.(error, variables, this.state.context);\n        await this.#mutationCache.config.onSettled?.(void 0, error, this.state.variables, this.state.context, this);\n        await this.options.onSettled?.(void 0, error, variables, this.state.context);\n        throw error;\n      } finally {\n        this.#dispatch({\n          type: \"error\",\n          error\n        });\n      }\n    }\n  }\n  #dispatch(action) {\n    const reducer = state => {\n      switch (action.type) {\n        case \"failed\":\n          return {\n            ...state,\n            failureCount: action.failureCount,\n            failureReason: action.error\n          };\n        case \"pause\":\n          return {\n            ...state,\n            isPaused: true\n          };\n        case \"continue\":\n          return {\n            ...state,\n            isPaused: false\n          };\n        case \"pending\":\n          return {\n            ...state,\n            context: action.context,\n            data: void 0,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            isPaused: !canFetch(this.options.networkMode),\n            status: \"pending\",\n            variables: action.variables,\n            submittedAt: Date.now()\n          };\n        case \"success\":\n          return {\n            ...state,\n            data: action.data,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            status: \"success\",\n            isPaused: false\n          };\n        case \"error\":\n          return {\n            ...state,\n            data: void 0,\n            error: action.error,\n            failureCount: state.failureCount + 1,\n            failureReason: action.error,\n            isPaused: false,\n            status: \"error\"\n          };\n      }\n    };\n    this.state = reducer(this.state);\n    notifyManager.batch(() => {\n      this.#observers.forEach(observer => {\n        observer.onMutationUpdate(action);\n      });\n      this.#mutationCache.notify({\n        mutation: this,\n        type: \"updated\",\n        action\n      });\n    });\n  }\n};\nfunction getDefaultState() {\n  return {\n    context: void 0,\n    data: void 0,\n    error: null,\n    failureCount: 0,\n    failureReason: null,\n    isPaused: false,\n    status: \"idle\",\n    variables: void 0,\n    submittedAt: 0\n  };\n}\nexport { Mutation, getDefaultState };","map":{"version":3,"names":["notifyManager","Removable","canFetch","createRetryer","Mutation","constructor","config","mutationId","defaultOptions","mutationCache","observers","state","getDefaultState","setOptions","options","scheduleGc","retryer","updateGcTime","gcTime","meta","addObserver","observer","includes","push","clearGcTimeout","notify","type","mutation","removeObserver","filter","x","optionalRemove","length","status","remove","continue","execute","variables","executeMutation","fn","mutationFn","Promise","reject","Error","onFail","failureCount","error","dispatch","onPause","onContinue","retry","retryDelay","networkMode","promise","restored","onMutate","context","data","onSuccess","onSettled","onError","#dispatch","action","reducer","failureReason","isPaused","submittedAt","Date","now","batch","forEach","onMutationUpdate"],"sources":["C:\\Users\\kishl\\Downloads\\code_oin\\apifl\\node_modules\\@tanstack\\query-core\\src\\mutation.ts"],"sourcesContent":["import { notifyManager } from './notifyManager'\nimport { Removable } from './removable'\nimport { canFetch, createRetryer } from './retryer'\nimport type {\n  DefaultError,\n  MutationMeta,\n  MutationOptions,\n  MutationStatus,\n} from './types'\nimport type { MutationCache } from './mutationCache'\nimport type { MutationObserver } from './mutationObserver'\nimport type { Retryer } from './retryer'\n\n// TYPES\n\ninterface MutationConfig<TData, TError, TVariables, TContext> {\n  mutationId: number\n  mutationCache: MutationCache\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  defaultOptions?: MutationOptions<TData, TError, TVariables, TContext>\n  state?: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport interface MutationState<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n> {\n  context: TContext | undefined\n  data: TData | undefined\n  error: TError | null\n  failureCount: number\n  failureReason: TError | null\n  isPaused: boolean\n  status: MutationStatus\n  variables: TVariables | undefined\n  submittedAt: number\n}\n\ninterface FailedAction<TError> {\n  type: 'failed'\n  failureCount: number\n  error: TError | null\n}\n\ninterface PendingAction<TVariables, TContext> {\n  type: 'pending'\n  variables?: TVariables\n  context?: TContext\n}\n\ninterface SuccessAction<TData> {\n  type: 'success'\n  data: TData\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\nexport type Action<TData, TError, TVariables, TContext> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction<TError>\n  | PendingAction<TVariables, TContext>\n  | PauseAction\n  | SuccessAction<TData>\n\n// CLASS\n\nexport class Mutation<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n> extends Removable {\n  state: MutationState<TData, TError, TVariables, TContext>\n  options!: MutationOptions<TData, TError, TVariables, TContext>\n  readonly mutationId: number\n\n  #observers: Array<MutationObserver<TData, TError, TVariables, TContext>>\n  #defaultOptions?: MutationOptions<TData, TError, TVariables, TContext>\n  #mutationCache: MutationCache\n  #retryer?: Retryer<TData>\n\n  constructor(config: MutationConfig<TData, TError, TVariables, TContext>) {\n    super()\n\n    this.mutationId = config.mutationId\n    this.#defaultOptions = config.defaultOptions\n    this.#mutationCache = config.mutationCache\n    this.#observers = []\n    this.state = config.state || getDefaultState()\n\n    this.setOptions(config.options)\n    this.scheduleGc()\n  }\n\n  setOptions(\n    options?: MutationOptions<TData, TError, TVariables, TContext>,\n  ): void {\n    this.options = { ...this.#defaultOptions, ...options }\n\n    this.updateGcTime(this.options.gcTime)\n  }\n\n  get meta(): MutationMeta | undefined {\n    return this.options.meta\n  }\n\n  addObserver(observer: MutationObserver<any, any, any, any>): void {\n    if (!this.#observers.includes(observer)) {\n      this.#observers.push(observer)\n\n      // Stop the mutation from being garbage collected\n      this.clearGcTimeout()\n\n      this.#mutationCache.notify({\n        type: 'observerAdded',\n        mutation: this,\n        observer,\n      })\n    }\n  }\n\n  removeObserver(observer: MutationObserver<any, any, any, any>): void {\n    this.#observers = this.#observers.filter((x) => x !== observer)\n\n    this.scheduleGc()\n\n    this.#mutationCache.notify({\n      type: 'observerRemoved',\n      mutation: this,\n      observer,\n    })\n  }\n\n  protected optionalRemove() {\n    if (!this.#observers.length) {\n      if (this.state.status === 'pending') {\n        this.scheduleGc()\n      } else {\n        this.#mutationCache.remove(this)\n      }\n    }\n  }\n\n  continue(): Promise<unknown> {\n    return (\n      this.#retryer?.continue() ??\n      // continuing a mutation assumes that variables are set, mutation must have been dehydrated before\n      this.execute(this.state.variables!)\n    )\n  }\n\n  async execute(variables: TVariables): Promise<TData> {\n    const executeMutation = () => {\n      this.#retryer = createRetryer({\n        fn: () => {\n          if (!this.options.mutationFn) {\n            return Promise.reject(new Error('No mutationFn found'))\n          }\n          return this.options.mutationFn(variables)\n        },\n        onFail: (failureCount, error) => {\n          this.#dispatch({ type: 'failed', failureCount, error })\n        },\n        onPause: () => {\n          this.#dispatch({ type: 'pause' })\n        },\n        onContinue: () => {\n          this.#dispatch({ type: 'continue' })\n        },\n        retry: this.options.retry ?? 0,\n        retryDelay: this.options.retryDelay,\n        networkMode: this.options.networkMode,\n      })\n\n      return this.#retryer.promise\n    }\n\n    const restored = this.state.status === 'pending'\n\n    try {\n      if (!restored) {\n        this.#dispatch({ type: 'pending', variables })\n        // Notify cache callback\n        await this.#mutationCache.config.onMutate?.(\n          variables,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n        const context = await this.options.onMutate?.(variables)\n        if (context !== this.state.context) {\n          this.#dispatch({\n            type: 'pending',\n            context,\n            variables,\n          })\n        }\n      }\n      const data = await executeMutation()\n\n      // Notify cache callback\n      await this.#mutationCache.config.onSuccess?.(\n        data,\n        variables,\n        this.state.context,\n        this as Mutation<unknown, unknown, unknown, unknown>,\n      )\n\n      await this.options.onSuccess?.(data, variables, this.state.context)\n\n      // Notify cache callback\n      await this.#mutationCache.config.onSettled?.(\n        data,\n        null,\n        this.state.variables,\n        this.state.context,\n        this as Mutation<unknown, unknown, unknown, unknown>,\n      )\n\n      await this.options.onSettled?.(data, null, variables, this.state.context)\n\n      this.#dispatch({ type: 'success', data })\n      return data\n    } catch (error) {\n      try {\n        // Notify cache callback\n        await this.#mutationCache.config.onError?.(\n          error as any,\n          variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n\n        await this.options.onError?.(\n          error as TError,\n          variables,\n          this.state.context,\n        )\n\n        // Notify cache callback\n        await this.#mutationCache.config.onSettled?.(\n          undefined,\n          error as any,\n          this.state.variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n\n        await this.options.onSettled?.(\n          undefined,\n          error as TError,\n          variables,\n          this.state.context,\n        )\n        throw error\n      } finally {\n        this.#dispatch({ type: 'error', error: error as TError })\n      }\n    }\n  }\n\n  #dispatch(action: Action<TData, TError, TVariables, TContext>): void {\n    const reducer = (\n      state: MutationState<TData, TError, TVariables, TContext>,\n    ): MutationState<TData, TError, TVariables, TContext> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            failureCount: action.failureCount,\n            failureReason: action.error,\n          }\n        case 'pause':\n          return {\n            ...state,\n            isPaused: true,\n          }\n        case 'continue':\n          return {\n            ...state,\n            isPaused: false,\n          }\n        case 'pending':\n          return {\n            ...state,\n            context: action.context,\n            data: undefined,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            isPaused: !canFetch(this.options.networkMode),\n            status: 'pending',\n            variables: action.variables,\n            submittedAt: Date.now(),\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            status: 'success',\n            isPaused: false,\n          }\n        case 'error':\n          return {\n            ...state,\n            data: undefined,\n            error: action.error,\n            failureCount: state.failureCount + 1,\n            failureReason: action.error,\n            isPaused: false,\n            status: 'error',\n          }\n      }\n    }\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.#observers.forEach((observer) => {\n        observer.onMutationUpdate(action)\n      })\n      this.#mutationCache.notify({\n        mutation: this,\n        type: 'updated',\n        action,\n      })\n    })\n  }\n}\n\nexport function getDefaultState<\n  TData,\n  TError,\n  TVariables,\n  TContext,\n>(): MutationState<TData, TError, TVariables, TContext> {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    failureReason: null,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined,\n    submittedAt: 0,\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}