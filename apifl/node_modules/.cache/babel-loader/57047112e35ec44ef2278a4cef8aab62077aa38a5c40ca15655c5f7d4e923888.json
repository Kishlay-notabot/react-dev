{"ast":null,"code":"\"use client\";\n\n// src/useSuspenseInfiniteQuery.ts\nimport { InfiniteQueryObserver } from \"@tanstack/query-core\";\nimport { useBaseQuery } from \"./useBaseQuery.js\";\nimport { defaultThrowOnError } from \"./suspense.js\";\nfunction useSuspenseInfiniteQuery(options, queryClient) {\n  return useBaseQuery({\n    ...options,\n    enabled: true,\n    suspense: true,\n    throwOnError: defaultThrowOnError\n  },\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n  InfiniteQueryObserver, queryClient);\n}\nexport { useSuspenseInfiniteQuery };","map":{"version":3,"names":["InfiniteQueryObserver","useBaseQuery","defaultThrowOnError","useSuspenseInfiniteQuery","options","queryClient","enabled","suspense","throwOnError"],"sources":["C:\\Users\\kishl\\Downloads\\code_oin\\apifl\\node_modules\\@tanstack\\react-query\\src\\useSuspenseInfiniteQuery.ts"],"sourcesContent":["'use client'\nimport { InfiniteQueryObserver } from '@tanstack/query-core'\nimport { useBaseQuery } from './useBaseQuery'\nimport { defaultThrowOnError } from './suspense'\nimport type {\n  InfiniteQueryObserverSuccessResult,\n  QueryObserver,\n} from '@tanstack/query-core'\nimport type {\n  DefaultError,\n  InfiniteData,\n  QueryClient,\n  QueryKey,\n} from '@tanstack/query-core'\nimport type {\n  UseSuspenseInfiniteQueryOptions,\n  UseSuspenseInfiniteQueryResult,\n} from './types'\n\nexport function useSuspenseInfiniteQuery<\n  TQueryFnData,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n>(\n  options: UseSuspenseInfiniteQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryFnData,\n    TQueryKey,\n    TPageParam\n  >,\n  queryClient?: QueryClient,\n): UseSuspenseInfiniteQueryResult<TData, TError> {\n  return useBaseQuery(\n    {\n      ...options,\n      enabled: true,\n      suspense: true,\n      throwOnError: defaultThrowOnError,\n    },\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n    InfiniteQueryObserver as typeof QueryObserver,\n    queryClient,\n  ) as InfiniteQueryObserverSuccessResult<TData, TError>\n}\n"],"mappings":";;;AACA,SAASA,qBAAA,QAA6B;AACtC,SAASC,YAAA,QAAoB;AAC7B,SAASC,mBAAA,QAA2B;AAgB7B,SAASC,yBAOdC,OAAA,EAQAC,WAAA,EAC+C;EAC/C,OAAOJ,YAAA,CACL;IACE,GAAGG,OAAA;IACHE,OAAA,EAAS;IACTC,QAAA,EAAU;IACVC,YAAA,EAAcN;EAChB;EAAA;EAEAF,qBAAA,EACAK,WACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}