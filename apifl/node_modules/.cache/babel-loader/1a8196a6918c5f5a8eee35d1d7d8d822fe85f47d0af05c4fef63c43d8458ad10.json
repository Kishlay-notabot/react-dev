{"ast":null,"code":"// src/queryClient.ts\nimport { functionalUpdate, hashKey, hashQueryKeyByOptions, noop, partialMatchKey } from \"./utils.js\";\nimport { QueryCache } from \"./queryCache.js\";\nimport { MutationCache } from \"./mutationCache.js\";\nimport { focusManager } from \"./focusManager.js\";\nimport { onlineManager } from \"./onlineManager.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { infiniteQueryBehavior } from \"./infiniteQueryBehavior.js\";\nvar QueryClient = class {\n  #queryCache;\n  #mutationCache;\n  #defaultOptions;\n  #queryDefaults;\n  #mutationDefaults;\n  #mountCount;\n  #unsubscribeFocus;\n  #unsubscribeOnline;\n  constructor(config = {}) {\n    this.#queryCache = config.queryCache || new QueryCache();\n    this.#mutationCache = config.mutationCache || new MutationCache();\n    this.#defaultOptions = config.defaultOptions || {};\n    this.#queryDefaults = /* @__PURE__ */new Map();\n    this.#mutationDefaults = /* @__PURE__ */new Map();\n    this.#mountCount = 0;\n  }\n  mount() {\n    this.#mountCount++;\n    if (this.#mountCount !== 1) return;\n    this.#unsubscribeFocus = focusManager.subscribe(() => {\n      if (focusManager.isFocused()) {\n        this.resumePausedMutations();\n        this.#queryCache.onFocus();\n      }\n    });\n    this.#unsubscribeOnline = onlineManager.subscribe(() => {\n      if (onlineManager.isOnline()) {\n        this.resumePausedMutations();\n        this.#queryCache.onOnline();\n      }\n    });\n  }\n  unmount() {\n    this.#mountCount--;\n    if (this.#mountCount !== 0) return;\n    this.#unsubscribeFocus?.();\n    this.#unsubscribeFocus = void 0;\n    this.#unsubscribeOnline?.();\n    this.#unsubscribeOnline = void 0;\n  }\n  isFetching(filters) {\n    return this.#queryCache.findAll({\n      ...filters,\n      fetchStatus: \"fetching\"\n    }).length;\n  }\n  isMutating(filters) {\n    return this.#mutationCache.findAll({\n      ...filters,\n      status: \"pending\"\n    }).length;\n  }\n  getQueryData(queryKey) {\n    return this.#queryCache.find({\n      queryKey\n    })?.state.data;\n  }\n  ensureQueryData(options) {\n    const cachedData = this.getQueryData(options.queryKey);\n    return cachedData !== void 0 ? Promise.resolve(cachedData) : this.fetchQuery(options);\n  }\n  getQueriesData(filters) {\n    return this.getQueryCache().findAll(filters).map(({\n      queryKey,\n      state\n    }) => {\n      const data = state.data;\n      return [queryKey, data];\n    });\n  }\n  setQueryData(queryKey, updater, options) {\n    const query = this.#queryCache.find({\n      queryKey\n    });\n    const prevData = query?.state.data;\n    const data = functionalUpdate(updater, prevData);\n    if (typeof data === \"undefined\") {\n      return void 0;\n    }\n    const defaultedOptions = this.defaultQueryOptions({\n      queryKey\n    });\n    return this.#queryCache.build(this, defaultedOptions).setData(data, {\n      ...options,\n      manual: true\n    });\n  }\n  setQueriesData(filters, updater, options) {\n    return notifyManager.batch(() => this.getQueryCache().findAll(filters).map(({\n      queryKey\n    }) => [queryKey, this.setQueryData(queryKey, updater, options)]));\n  }\n  getQueryState(queryKey) {\n    return this.#queryCache.find({\n      queryKey\n    })?.state;\n  }\n  removeQueries(filters) {\n    const queryCache = this.#queryCache;\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        queryCache.remove(query);\n      });\n    });\n  }\n  resetQueries(filters, options) {\n    const queryCache = this.#queryCache;\n    const refetchFilters = {\n      type: \"active\",\n      ...filters\n    };\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        query.reset();\n      });\n      return this.refetchQueries(refetchFilters, options);\n    });\n  }\n  cancelQueries(filters = {}, cancelOptions = {}) {\n    const defaultedCancelOptions = {\n      revert: true,\n      ...cancelOptions\n    };\n    const promises = notifyManager.batch(() => this.#queryCache.findAll(filters).map(query => query.cancel(defaultedCancelOptions)));\n    return Promise.all(promises).then(noop).catch(noop);\n  }\n  invalidateQueries(filters = {}, options = {}) {\n    return notifyManager.batch(() => {\n      this.#queryCache.findAll(filters).forEach(query => {\n        query.invalidate();\n      });\n      if (filters.refetchType === \"none\") {\n        return Promise.resolve();\n      }\n      const refetchFilters = {\n        ...filters,\n        type: filters.refetchType ?? filters.type ?? \"active\"\n      };\n      return this.refetchQueries(refetchFilters, options);\n    });\n  }\n  refetchQueries(filters = {}, options) {\n    const fetchOptions = {\n      ...options,\n      cancelRefetch: options?.cancelRefetch ?? true\n    };\n    const promises = notifyManager.batch(() => this.#queryCache.findAll(filters).filter(query => !query.isDisabled()).map(query => {\n      let promise = query.fetch(void 0, fetchOptions);\n      if (!fetchOptions.throwOnError) {\n        promise = promise.catch(noop);\n      }\n      return query.state.fetchStatus === \"paused\" ? Promise.resolve() : promise;\n    }));\n    return Promise.all(promises).then(noop);\n  }\n  fetchQuery(options) {\n    const defaultedOptions = this.defaultQueryOptions(options);\n    if (typeof defaultedOptions.retry === \"undefined\") {\n      defaultedOptions.retry = false;\n    }\n    const query = this.#queryCache.build(this, defaultedOptions);\n    return query.isStaleByTime(defaultedOptions.staleTime) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);\n  }\n  prefetchQuery(options) {\n    return this.fetchQuery(options).then(noop).catch(noop);\n  }\n  fetchInfiniteQuery(options) {\n    options.behavior = infiniteQueryBehavior(options.pages);\n    return this.fetchQuery(options);\n  }\n  prefetchInfiniteQuery(options) {\n    return this.fetchInfiniteQuery(options).then(noop).catch(noop);\n  }\n  resumePausedMutations() {\n    return this.#mutationCache.resumePausedMutations();\n  }\n  getQueryCache() {\n    return this.#queryCache;\n  }\n  getMutationCache() {\n    return this.#mutationCache;\n  }\n  getDefaultOptions() {\n    return this.#defaultOptions;\n  }\n  setDefaultOptions(options) {\n    this.#defaultOptions = options;\n  }\n  setQueryDefaults(queryKey, options) {\n    this.#queryDefaults.set(hashKey(queryKey), {\n      queryKey,\n      defaultOptions: options\n    });\n  }\n  getQueryDefaults(queryKey) {\n    const defaults = [...this.#queryDefaults.values()];\n    let result = {};\n    defaults.forEach(queryDefault => {\n      if (partialMatchKey(queryKey, queryDefault.queryKey)) {\n        result = {\n          ...result,\n          ...queryDefault.defaultOptions\n        };\n      }\n    });\n    return result;\n  }\n  setMutationDefaults(mutationKey, options) {\n    this.#mutationDefaults.set(hashKey(mutationKey), {\n      mutationKey,\n      defaultOptions: options\n    });\n  }\n  getMutationDefaults(mutationKey) {\n    const defaults = [...this.#mutationDefaults.values()];\n    let result = {};\n    defaults.forEach(queryDefault => {\n      if (partialMatchKey(mutationKey, queryDefault.mutationKey)) {\n        result = {\n          ...result,\n          ...queryDefault.defaultOptions\n        };\n      }\n    });\n    return result;\n  }\n  defaultQueryOptions(options) {\n    if (options?._defaulted) {\n      return options;\n    }\n    const defaultedOptions = {\n      ...this.#defaultOptions.queries,\n      ...(options?.queryKey && this.getQueryDefaults(options.queryKey)),\n      ...options,\n      _defaulted: true\n    };\n    if (!defaultedOptions.queryHash) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(defaultedOptions.queryKey, defaultedOptions);\n    }\n    if (typeof defaultedOptions.refetchOnReconnect === \"undefined\") {\n      defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== \"always\";\n    }\n    if (typeof defaultedOptions.throwOnError === \"undefined\") {\n      defaultedOptions.throwOnError = !!defaultedOptions.suspense;\n    }\n    if (typeof defaultedOptions.networkMode === \"undefined\" && defaultedOptions.persister) {\n      defaultedOptions.networkMode = \"offlineFirst\";\n    }\n    return defaultedOptions;\n  }\n  defaultMutationOptions(options) {\n    if (options?._defaulted) {\n      return options;\n    }\n    return {\n      ...this.#defaultOptions.mutations,\n      ...(options?.mutationKey && this.getMutationDefaults(options.mutationKey)),\n      ...options,\n      _defaulted: true\n    };\n  }\n  clear() {\n    this.#queryCache.clear();\n    this.#mutationCache.clear();\n  }\n};\nexport { QueryClient };","map":{"version":3,"names":["functionalUpdate","hashKey","hashQueryKeyByOptions","noop","partialMatchKey","QueryCache","MutationCache","focusManager","onlineManager","notifyManager","infiniteQueryBehavior","QueryClient","queryCache","mutationCache","defaultOptions","queryDefaults","mutationDefaults","mountCount","unsubscribeFocus","unsubscribeOnline","constructor","config","Map","mount","subscribe","isFocused","resumePausedMutations","onFocus","isOnline","onOnline","unmount","isFetching","filters","findAll","fetchStatus","length","isMutating","status","getQueryData","queryKey","find","state","data","ensureQueryData","options","cachedData","Promise","resolve","fetchQuery","getQueriesData","getQueryCache","map","setQueryData","updater","query","prevData","defaultedOptions","defaultQueryOptions","build","setData","manual","setQueriesData","batch","getQueryState","removeQueries","forEach","remove","resetQueries","refetchFilters","type","reset","refetchQueries","cancelQueries","cancelOptions","defaultedCancelOptions","revert","promises","cancel","all","then","catch","invalidateQueries","invalidate","refetchType","fetchOptions","cancelRefetch","filter","isDisabled","promise","fetch","throwOnError","retry","isStaleByTime","staleTime","prefetchQuery","fetchInfiniteQuery","behavior","pages","prefetchInfiniteQuery","getMutationCache","getDefaultOptions","setDefaultOptions","setQueryDefaults","set","getQueryDefaults","defaults","values","result","queryDefault","setMutationDefaults","mutationKey","getMutationDefaults","_defaulted","queries","queryHash","refetchOnReconnect","networkMode","suspense","persister","defaultMutationOptions","mutations","clear"],"sources":["C:\\Users\\kishl\\Downloads\\code_oin\\apifl\\node_modules\\@tanstack\\query-core\\src\\queryClient.ts"],"sourcesContent":["import {\n  functionalUpdate,\n  hashKey,\n  hashQueryKeyByOptions,\n  noop,\n  partialMatchKey,\n} from './utils'\nimport { QueryCache } from './queryCache'\nimport { MutationCache } from './mutationCache'\nimport { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { notifyManager } from './notifyManager'\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior'\nimport type { DataTag, NoInfer } from './types'\nimport type { QueryState } from './query'\nimport type {\n  CancelOptions,\n  DefaultError,\n  DefaultOptions,\n  DefaultedQueryObserverOptions,\n  FetchInfiniteQueryOptions,\n  FetchQueryOptions,\n  InfiniteData,\n  InvalidateOptions,\n  InvalidateQueryFilters,\n  MutationKey,\n  MutationObserverOptions,\n  MutationOptions,\n  QueryClientConfig,\n  QueryKey,\n  QueryObserverOptions,\n  QueryOptions,\n  RefetchOptions,\n  RefetchQueryFilters,\n  ResetOptions,\n  SetDataOptions,\n} from './types'\nimport type { MutationFilters, QueryFilters, Updater } from './utils'\n\n// TYPES\n\ninterface QueryDefaults {\n  queryKey: QueryKey\n  defaultOptions: QueryOptions<any, any, any>\n}\n\ninterface MutationDefaults {\n  mutationKey: MutationKey\n  defaultOptions: MutationOptions<any, any, any, any>\n}\n\n// CLASS\n\nexport class QueryClient {\n  #queryCache: QueryCache\n  #mutationCache: MutationCache\n  #defaultOptions: DefaultOptions\n  #queryDefaults: Map<string, QueryDefaults>\n  #mutationDefaults: Map<string, MutationDefaults>\n  #mountCount: number\n  #unsubscribeFocus?: () => void\n  #unsubscribeOnline?: () => void\n\n  constructor(config: QueryClientConfig = {}) {\n    this.#queryCache = config.queryCache || new QueryCache()\n    this.#mutationCache = config.mutationCache || new MutationCache()\n    this.#defaultOptions = config.defaultOptions || {}\n    this.#queryDefaults = new Map()\n    this.#mutationDefaults = new Map()\n    this.#mountCount = 0\n  }\n\n  mount(): void {\n    this.#mountCount++\n    if (this.#mountCount !== 1) return\n\n    this.#unsubscribeFocus = focusManager.subscribe(() => {\n      if (focusManager.isFocused()) {\n        this.resumePausedMutations()\n        this.#queryCache.onFocus()\n      }\n    })\n    this.#unsubscribeOnline = onlineManager.subscribe(() => {\n      if (onlineManager.isOnline()) {\n        this.resumePausedMutations()\n        this.#queryCache.onOnline()\n      }\n    })\n  }\n\n  unmount(): void {\n    this.#mountCount--\n    if (this.#mountCount !== 0) return\n\n    this.#unsubscribeFocus?.()\n    this.#unsubscribeFocus = undefined\n\n    this.#unsubscribeOnline?.()\n    this.#unsubscribeOnline = undefined\n  }\n\n  isFetching(filters?: QueryFilters): number {\n    return this.#queryCache.findAll({ ...filters, fetchStatus: 'fetching' })\n      .length\n  }\n\n  isMutating(filters?: MutationFilters): number {\n    return this.#mutationCache.findAll({ ...filters, status: 'pending' }).length\n  }\n\n  getQueryData<\n    TQueryFnData = unknown,\n    TaggedQueryKey extends QueryKey = QueryKey,\n    TInferredQueryFnData = TaggedQueryKey extends DataTag<\n      unknown,\n      infer TaggedValue\n    >\n      ? TaggedValue\n      : TQueryFnData,\n  >(queryKey: TaggedQueryKey): TInferredQueryFnData | undefined\n  getQueryData(queryKey: QueryKey) {\n    return this.#queryCache.find({ queryKey })?.state.data\n  }\n\n  ensureQueryData<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData> {\n    const cachedData = this.getQueryData<TData>(options.queryKey)\n\n    return cachedData !== undefined\n      ? Promise.resolve(cachedData)\n      : this.fetchQuery(options)\n  }\n\n  getQueriesData<TQueryFnData = unknown>(\n    filters: QueryFilters,\n  ): Array<[QueryKey, TQueryFnData | undefined]> {\n    return this.getQueryCache()\n      .findAll(filters)\n      .map(({ queryKey, state }) => {\n        const data = state.data as TQueryFnData | undefined\n        return [queryKey, data]\n      })\n  }\n\n  setQueryData<\n    TQueryFnData = unknown,\n    TaggedQueryKey extends QueryKey = QueryKey,\n    TInferredQueryFnData = TaggedQueryKey extends DataTag<\n      unknown,\n      infer TaggedValue\n    >\n      ? TaggedValue\n      : TQueryFnData,\n  >(\n    queryKey: TaggedQueryKey,\n    updater: Updater<\n      NoInfer<TInferredQueryFnData> | undefined,\n      NoInfer<TInferredQueryFnData> | undefined\n    >,\n    options?: SetDataOptions,\n  ): TInferredQueryFnData | undefined {\n    const query = this.#queryCache.find<TInferredQueryFnData>({ queryKey })\n    const prevData = query?.state.data\n    const data = functionalUpdate(updater, prevData)\n\n    if (typeof data === 'undefined') {\n      return undefined\n    }\n\n    const defaultedOptions = this.defaultQueryOptions<\n      any,\n      any,\n      unknown,\n      any,\n      QueryKey\n    >({ queryKey })\n\n    return this.#queryCache\n      .build(this, defaultedOptions)\n      .setData(data, { ...options, manual: true })\n  }\n\n  setQueriesData<TQueryFnData>(\n    filters: QueryFilters,\n    updater: Updater<TQueryFnData | undefined, TQueryFnData | undefined>,\n    options?: SetDataOptions,\n  ): Array<[QueryKey, TQueryFnData | undefined]> {\n    return notifyManager.batch(() =>\n      this.getQueryCache()\n        .findAll(filters)\n        .map(({ queryKey }) => [\n          queryKey,\n          this.setQueryData<TQueryFnData>(queryKey, updater, options),\n        ]),\n    )\n  }\n\n  getQueryState<TQueryFnData = unknown, TError = DefaultError>(\n    queryKey: QueryKey,\n  ): QueryState<TQueryFnData, TError> | undefined {\n    return this.#queryCache.find<TQueryFnData, TError>({ queryKey })?.state\n  }\n\n  removeQueries(filters?: QueryFilters): void {\n    const queryCache = this.#queryCache\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        queryCache.remove(query)\n      })\n    })\n  }\n\n  resetQueries(filters?: QueryFilters, options?: ResetOptions): Promise<void> {\n    const queryCache = this.#queryCache\n\n    const refetchFilters: RefetchQueryFilters = {\n      type: 'active',\n      ...filters,\n    }\n\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        query.reset()\n      })\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  cancelQueries(\n    filters: QueryFilters = {},\n    cancelOptions: CancelOptions = {},\n  ): Promise<void> {\n    const defaultedCancelOptions = { revert: true, ...cancelOptions }\n\n    const promises = notifyManager.batch(() =>\n      this.#queryCache\n        .findAll(filters)\n        .map((query) => query.cancel(defaultedCancelOptions)),\n    )\n\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  invalidateQueries(\n    filters: InvalidateQueryFilters = {},\n    options: InvalidateOptions = {},\n  ): Promise<void> {\n    return notifyManager.batch(() => {\n      this.#queryCache.findAll(filters).forEach((query) => {\n        query.invalidate()\n      })\n\n      if (filters.refetchType === 'none') {\n        return Promise.resolve()\n      }\n      const refetchFilters: RefetchQueryFilters = {\n        ...filters,\n        type: filters.refetchType ?? filters.type ?? 'active',\n      }\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  refetchQueries(\n    filters: RefetchQueryFilters = {},\n    options?: RefetchOptions,\n  ): Promise<void> {\n    const fetchOptions = {\n      ...options,\n      cancelRefetch: options?.cancelRefetch ?? true,\n    }\n    const promises = notifyManager.batch(() =>\n      this.#queryCache\n        .findAll(filters)\n        .filter((query) => !query.isDisabled())\n        .map((query) => {\n          let promise = query.fetch(undefined, fetchOptions)\n          if (!fetchOptions.throwOnError) {\n            promise = promise.catch(noop)\n          }\n          return query.state.fetchStatus === 'paused'\n            ? Promise.resolve()\n            : promise\n        }),\n    )\n\n    return Promise.all(promises).then(noop)\n  }\n\n  fetchQuery<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = never,\n  >(\n    options: FetchQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<TData> {\n    const defaultedOptions = this.defaultQueryOptions(options)\n\n    // https://github.com/tannerlinsley/react-query/issues/652\n    if (typeof defaultedOptions.retry === 'undefined') {\n      defaultedOptions.retry = false\n    }\n\n    const query = this.#queryCache.build(this, defaultedOptions)\n\n    return query.isStaleByTime(defaultedOptions.staleTime)\n      ? query.fetch(defaultedOptions)\n      : Promise.resolve(query.state.data as TData)\n  }\n\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void> {\n    return this.fetchQuery(options).then(noop).catch(noop)\n  }\n\n  fetchInfiniteQuery<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = unknown,\n  >(\n    options: FetchInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<InfiniteData<TData, TPageParam>> {\n    options.behavior = infiniteQueryBehavior<\n      TQueryFnData,\n      TError,\n      TData,\n      TPageParam\n    >(options.pages)\n    return this.fetchQuery(options)\n  }\n\n  prefetchInfiniteQuery<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = unknown,\n  >(\n    options: FetchInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<void> {\n    return this.fetchInfiniteQuery(options).then(noop).catch(noop)\n  }\n\n  resumePausedMutations(): Promise<unknown> {\n    return this.#mutationCache.resumePausedMutations()\n  }\n\n  getQueryCache(): QueryCache {\n    return this.#queryCache\n  }\n\n  getMutationCache(): MutationCache {\n    return this.#mutationCache\n  }\n\n  getDefaultOptions(): DefaultOptions {\n    return this.#defaultOptions\n  }\n\n  setDefaultOptions(options: DefaultOptions): void {\n    this.#defaultOptions = options\n  }\n\n  setQueryDefaults(\n    queryKey: QueryKey,\n    options: Partial<\n      Omit<QueryObserverOptions<unknown, any, any, any>, 'queryKey'>\n    >,\n  ): void {\n    this.#queryDefaults.set(hashKey(queryKey), {\n      queryKey,\n      defaultOptions: options,\n    })\n  }\n\n  getQueryDefaults(\n    queryKey: QueryKey,\n  ): QueryObserverOptions<any, any, any, any, any> {\n    const defaults = [...this.#queryDefaults.values()]\n\n    let result: QueryObserverOptions<any, any, any, any, any> = {}\n\n    defaults.forEach((queryDefault) => {\n      if (partialMatchKey(queryKey, queryDefault.queryKey)) {\n        result = { ...result, ...queryDefault.defaultOptions }\n      }\n    })\n    return result\n  }\n\n  setMutationDefaults(\n    mutationKey: MutationKey,\n    options: Omit<MutationObserverOptions<any, any, any, any>, 'mutationKey'>,\n  ): void {\n    this.#mutationDefaults.set(hashKey(mutationKey), {\n      mutationKey,\n      defaultOptions: options,\n    })\n  }\n\n  getMutationDefaults(\n    mutationKey: MutationKey,\n  ): MutationObserverOptions<any, any, any, any> {\n    const defaults = [...this.#mutationDefaults.values()]\n\n    let result: MutationObserverOptions<any, any, any, any> = {}\n\n    defaults.forEach((queryDefault) => {\n      if (partialMatchKey(mutationKey, queryDefault.mutationKey)) {\n        result = { ...result, ...queryDefault.defaultOptions }\n      }\n    })\n\n    return result\n  }\n\n  defaultQueryOptions<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = never,\n  >(\n    options?:\n      | QueryObserverOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryData,\n          TQueryKey,\n          TPageParam\n        >\n      | DefaultedQueryObserverOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryData,\n          TQueryKey\n        >,\n  ): DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  > {\n    if (options?._defaulted) {\n      return options as DefaultedQueryObserverOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryData,\n        TQueryKey\n      >\n    }\n\n    const defaultedOptions = {\n      ...this.#defaultOptions.queries,\n      ...(options?.queryKey && this.getQueryDefaults(options.queryKey)),\n      ...options,\n      _defaulted: true,\n    }\n\n    if (!defaultedOptions.queryHash) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(\n        defaultedOptions.queryKey,\n        defaultedOptions,\n      )\n    }\n\n    // dependent default values\n    if (typeof defaultedOptions.refetchOnReconnect === 'undefined') {\n      defaultedOptions.refetchOnReconnect =\n        defaultedOptions.networkMode !== 'always'\n    }\n    if (typeof defaultedOptions.throwOnError === 'undefined') {\n      defaultedOptions.throwOnError = !!defaultedOptions.suspense\n    }\n\n    if (\n      typeof defaultedOptions.networkMode === 'undefined' &&\n      defaultedOptions.persister\n    ) {\n      defaultedOptions.networkMode = 'offlineFirst'\n    }\n\n    return defaultedOptions as DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  }\n\n  defaultMutationOptions<T extends MutationOptions<any, any, any, any>>(\n    options?: T,\n  ): T {\n    if (options?._defaulted) {\n      return options\n    }\n    return {\n      ...this.#defaultOptions.mutations,\n      ...(options?.mutationKey &&\n        this.getMutationDefaults(options.mutationKey)),\n      ...options,\n      _defaulted: true,\n    } as T\n  }\n\n  clear(): void {\n    this.#queryCache.clear()\n    this.#mutationCache.clear()\n  }\n}\n"],"mappings":";AAAA,SACEA,gBAAA,EACAC,OAAA,EACAC,qBAAA,EACAC,IAAA,EACAC,eAAA,QACK;AACP,SAASC,UAAA,QAAkB;AAC3B,SAASC,aAAA,QAAqB;AAC9B,SAASC,YAAA,QAAoB;AAC7B,SAASC,aAAA,QAAqB;AAC9B,SAASC,aAAA,QAAqB;AAC9B,SAASC,qBAAA,QAA6B;AAyC/B,IAAMC,WAAA,GAAN,MAAkB;EACvB,CAAAC,UAAA;EACA,CAAAC,aAAA;EACA,CAAAC,cAAA;EACA,CAAAC,aAAA;EACA,CAAAC,gBAAA;EACA,CAAAC,UAAA;EACA,CAAAC,gBAAA;EACA,CAAAC,iBAAA;EAEAC,YAAYC,MAAA,GAA4B,CAAC,GAAG;IAC1C,KAAK,CAAAT,UAAA,GAAcS,MAAA,CAAOT,UAAA,IAAc,IAAIP,UAAA,CAAW;IACvD,KAAK,CAAAQ,aAAA,GAAiBQ,MAAA,CAAOR,aAAA,IAAiB,IAAIP,aAAA,CAAc;IAChE,KAAK,CAAAQ,cAAA,GAAkBO,MAAA,CAAOP,cAAA,IAAkB,CAAC;IACjD,KAAK,CAAAC,aAAA,GAAiB,mBAAIO,GAAA,CAAI;IAC9B,KAAK,CAAAN,gBAAA,GAAoB,mBAAIM,GAAA,CAAI;IACjC,KAAK,CAAAL,UAAA,GAAc;EACrB;EAEAM,MAAA,EAAc;IACZ,KAAK,CAAAN,UAAA;IACL,IAAI,KAAK,CAAAA,UAAA,KAAgB,GAAG;IAE5B,KAAK,CAAAC,gBAAA,GAAoBX,YAAA,CAAaiB,SAAA,CAAU,MAAM;MACpD,IAAIjB,YAAA,CAAakB,SAAA,CAAU,GAAG;QAC5B,KAAKC,qBAAA,CAAsB;QAC3B,KAAK,CAAAd,UAAA,CAAYe,OAAA,CAAQ;MAC3B;IACF,CAAC;IACD,KAAK,CAAAR,iBAAA,GAAqBX,aAAA,CAAcgB,SAAA,CAAU,MAAM;MACtD,IAAIhB,aAAA,CAAcoB,QAAA,CAAS,GAAG;QAC5B,KAAKF,qBAAA,CAAsB;QAC3B,KAAK,CAAAd,UAAA,CAAYiB,QAAA,CAAS;MAC5B;IACF,CAAC;EACH;EAEAC,QAAA,EAAgB;IACd,KAAK,CAAAb,UAAA;IACL,IAAI,KAAK,CAAAA,UAAA,KAAgB,GAAG;IAE5B,KAAK,CAAAC,gBAAA,GAAoB;IACzB,KAAK,CAAAA,gBAAA,GAAoB;IAEzB,KAAK,CAAAC,iBAAA,GAAqB;IAC1B,KAAK,CAAAA,iBAAA,GAAqB;EAC5B;EAEAY,WAAWC,OAAA,EAAgC;IACzC,OAAO,KAAK,CAAApB,UAAA,CAAYqB,OAAA,CAAQ;MAAE,GAAGD,OAAA;MAASE,WAAA,EAAa;IAAW,CAAC,EACpEC,MAAA;EACL;EAEAC,WAAWJ,OAAA,EAAmC;IAC5C,OAAO,KAAK,CAAAnB,aAAA,CAAeoB,OAAA,CAAQ;MAAE,GAAGD,OAAA;MAASK,MAAA,EAAQ;IAAU,CAAC,EAAEF,MAAA;EACxE;EAYAG,aAAaC,QAAA,EAAoB;IAC/B,OAAO,KAAK,CAAA3B,UAAA,CAAY4B,IAAA,CAAK;MAAED;IAAS,CAAC,GAAGE,KAAA,CAAMC,IAAA;EACpD;EAEAC,gBAMEC,OAAA,EACgB;IAChB,MAAMC,UAAA,GAAa,KAAKP,YAAA,CAAoBM,OAAA,CAAQL,QAAQ;IAE5D,OAAOM,UAAA,KAAe,SAClBC,OAAA,CAAQC,OAAA,CAAQF,UAAU,IAC1B,KAAKG,UAAA,CAAWJ,OAAO;EAC7B;EAEAK,eACEjB,OAAA,EAC6C;IAC7C,OAAO,KAAKkB,aAAA,CAAc,EACvBjB,OAAA,CAAQD,OAAO,EACfmB,GAAA,CAAI,CAAC;MAAEZ,QAAA;MAAUE;IAAM,MAAM;MAC5B,MAAMC,IAAA,GAAOD,KAAA,CAAMC,IAAA;MACnB,OAAO,CAACH,QAAA,EAAUG,IAAI;IACxB,CAAC;EACL;EAEAU,aAUEb,QAAA,EACAc,OAAA,EAIAT,OAAA,EACkC;IAClC,MAAMU,KAAA,GAAQ,KAAK,CAAA1C,UAAA,CAAY4B,IAAA,CAA2B;MAAED;IAAS,CAAC;IACtE,MAAMgB,QAAA,GAAWD,KAAA,EAAOb,KAAA,CAAMC,IAAA;IAC9B,MAAMA,IAAA,GAAO1C,gBAAA,CAAiBqD,OAAA,EAASE,QAAQ;IAE/C,IAAI,OAAOb,IAAA,KAAS,aAAa;MAC/B,OAAO;IACT;IAEA,MAAMc,gBAAA,GAAmB,KAAKC,mBAAA,CAM5B;MAAElB;IAAS,CAAC;IAEd,OAAO,KAAK,CAAA3B,UAAA,CACT8C,KAAA,CAAM,MAAMF,gBAAgB,EAC5BG,OAAA,CAAQjB,IAAA,EAAM;MAAE,GAAGE,OAAA;MAASgB,MAAA,EAAQ;IAAK,CAAC;EAC/C;EAEAC,eACE7B,OAAA,EACAqB,OAAA,EACAT,OAAA,EAC6C;IAC7C,OAAOnC,aAAA,CAAcqD,KAAA,CAAM,MACzB,KAAKZ,aAAA,CAAc,EAChBjB,OAAA,CAAQD,OAAO,EACfmB,GAAA,CAAI,CAAC;MAAEZ;IAAS,MAAM,CACrBA,QAAA,EACA,KAAKa,YAAA,CAA2Bb,QAAA,EAAUc,OAAA,EAAST,OAAO,EAC3D,CACL;EACF;EAEAmB,cACExB,QAAA,EAC8C;IAC9C,OAAO,KAAK,CAAA3B,UAAA,CAAY4B,IAAA,CAA2B;MAAED;IAAS,CAAC,GAAGE,KAAA;EACpE;EAEAuB,cAAchC,OAAA,EAA8B;IAC1C,MAAMpB,UAAA,GAAa,KAAK,CAAAA,UAAA;IACxBH,aAAA,CAAcqD,KAAA,CAAM,MAAM;MACxBlD,UAAA,CAAWqB,OAAA,CAAQD,OAAO,EAAEiC,OAAA,CAASX,KAAA,IAAU;QAC7C1C,UAAA,CAAWsD,MAAA,CAAOZ,KAAK;MACzB,CAAC;IACH,CAAC;EACH;EAEAa,aAAanC,OAAA,EAAwBY,OAAA,EAAuC;IAC1E,MAAMhC,UAAA,GAAa,KAAK,CAAAA,UAAA;IAExB,MAAMwD,cAAA,GAAsC;MAC1CC,IAAA,EAAM;MACN,GAAGrC;IACL;IAEA,OAAOvB,aAAA,CAAcqD,KAAA,CAAM,MAAM;MAC/BlD,UAAA,CAAWqB,OAAA,CAAQD,OAAO,EAAEiC,OAAA,CAASX,KAAA,IAAU;QAC7CA,KAAA,CAAMgB,KAAA,CAAM;MACd,CAAC;MACD,OAAO,KAAKC,cAAA,CAAeH,cAAA,EAAgBxB,OAAO;IACpD,CAAC;EACH;EAEA4B,cACExC,OAAA,GAAwB,CAAC,GACzByC,aAAA,GAA+B,CAAC,GACjB;IACf,MAAMC,sBAAA,GAAyB;MAAEC,MAAA,EAAQ;MAAM,GAAGF;IAAc;IAEhE,MAAMG,QAAA,GAAWnE,aAAA,CAAcqD,KAAA,CAAM,MACnC,KAAK,CAAAlD,UAAA,CACFqB,OAAA,CAAQD,OAAO,EACfmB,GAAA,CAAKG,KAAA,IAAUA,KAAA,CAAMuB,MAAA,CAAOH,sBAAsB,CAAC,CACxD;IAEA,OAAO5B,OAAA,CAAQgC,GAAA,CAAIF,QAAQ,EAAEG,IAAA,CAAK5E,IAAI,EAAE6E,KAAA,CAAM7E,IAAI;EACpD;EAEA8E,kBACEjD,OAAA,GAAkC,CAAC,GACnCY,OAAA,GAA6B,CAAC,GACf;IACf,OAAOnC,aAAA,CAAcqD,KAAA,CAAM,MAAM;MAC/B,KAAK,CAAAlD,UAAA,CAAYqB,OAAA,CAAQD,OAAO,EAAEiC,OAAA,CAASX,KAAA,IAAU;QACnDA,KAAA,CAAM4B,UAAA,CAAW;MACnB,CAAC;MAED,IAAIlD,OAAA,CAAQmD,WAAA,KAAgB,QAAQ;QAClC,OAAOrC,OAAA,CAAQC,OAAA,CAAQ;MACzB;MACA,MAAMqB,cAAA,GAAsC;QAC1C,GAAGpC,OAAA;QACHqC,IAAA,EAAMrC,OAAA,CAAQmD,WAAA,IAAenD,OAAA,CAAQqC,IAAA,IAAQ;MAC/C;MACA,OAAO,KAAKE,cAAA,CAAeH,cAAA,EAAgBxB,OAAO;IACpD,CAAC;EACH;EAEA2B,eACEvC,OAAA,GAA+B,CAAC,GAChCY,OAAA,EACe;IACf,MAAMwC,YAAA,GAAe;MACnB,GAAGxC,OAAA;MACHyC,aAAA,EAAezC,OAAA,EAASyC,aAAA,IAAiB;IAC3C;IACA,MAAMT,QAAA,GAAWnE,aAAA,CAAcqD,KAAA,CAAM,MACnC,KAAK,CAAAlD,UAAA,CACFqB,OAAA,CAAQD,OAAO,EACfsD,MAAA,CAAQhC,KAAA,IAAU,CAACA,KAAA,CAAMiC,UAAA,CAAW,CAAC,EACrCpC,GAAA,CAAKG,KAAA,IAAU;MACd,IAAIkC,OAAA,GAAUlC,KAAA,CAAMmC,KAAA,CAAM,QAAWL,YAAY;MACjD,IAAI,CAACA,YAAA,CAAaM,YAAA,EAAc;QAC9BF,OAAA,GAAUA,OAAA,CAAQR,KAAA,CAAM7E,IAAI;MAC9B;MACA,OAAOmD,KAAA,CAAMb,KAAA,CAAMP,WAAA,KAAgB,WAC/BY,OAAA,CAAQC,OAAA,CAAQ,IAChByC,OAAA;IACN,CAAC,CACL;IAEA,OAAO1C,OAAA,CAAQgC,GAAA,CAAIF,QAAQ,EAAEG,IAAA,CAAK5E,IAAI;EACxC;EAEA6C,WAOEJ,OAAA,EAOgB;IAChB,MAAMY,gBAAA,GAAmB,KAAKC,mBAAA,CAAoBb,OAAO;IAGzD,IAAI,OAAOY,gBAAA,CAAiBmC,KAAA,KAAU,aAAa;MACjDnC,gBAAA,CAAiBmC,KAAA,GAAQ;IAC3B;IAEA,MAAMrC,KAAA,GAAQ,KAAK,CAAA1C,UAAA,CAAY8C,KAAA,CAAM,MAAMF,gBAAgB;IAE3D,OAAOF,KAAA,CAAMsC,aAAA,CAAcpC,gBAAA,CAAiBqC,SAAS,IACjDvC,KAAA,CAAMmC,KAAA,CAAMjC,gBAAgB,IAC5BV,OAAA,CAAQC,OAAA,CAAQO,KAAA,CAAMb,KAAA,CAAMC,IAAa;EAC/C;EAEAoD,cAMElD,OAAA,EACe;IACf,OAAO,KAAKI,UAAA,CAAWJ,OAAO,EAAEmC,IAAA,CAAK5E,IAAI,EAAE6E,KAAA,CAAM7E,IAAI;EACvD;EAEA4F,mBAOEnD,OAAA,EAO0C;IAC1CA,OAAA,CAAQoD,QAAA,GAAWtF,qBAAA,CAKjBkC,OAAA,CAAQqD,KAAK;IACf,OAAO,KAAKjD,UAAA,CAAWJ,OAAO;EAChC;EAEAsD,sBAOEtD,OAAA,EAOe;IACf,OAAO,KAAKmD,kBAAA,CAAmBnD,OAAO,EAAEmC,IAAA,CAAK5E,IAAI,EAAE6E,KAAA,CAAM7E,IAAI;EAC/D;EAEAuB,sBAAA,EAA0C;IACxC,OAAO,KAAK,CAAAb,aAAA,CAAea,qBAAA,CAAsB;EACnD;EAEAwB,cAAA,EAA4B;IAC1B,OAAO,KAAK,CAAAtC,UAAA;EACd;EAEAuF,iBAAA,EAAkC;IAChC,OAAO,KAAK,CAAAtF,aAAA;EACd;EAEAuF,kBAAA,EAAoC;IAClC,OAAO,KAAK,CAAAtF,cAAA;EACd;EAEAuF,kBAAkBzD,OAAA,EAA+B;IAC/C,KAAK,CAAA9B,cAAA,GAAkB8B,OAAA;EACzB;EAEA0D,iBACE/D,QAAA,EACAK,OAAA,EAGM;IACN,KAAK,CAAA7B,aAAA,CAAewF,GAAA,CAAItG,OAAA,CAAQsC,QAAQ,GAAG;MACzCA,QAAA;MACAzB,cAAA,EAAgB8B;IAClB,CAAC;EACH;EAEA4D,iBACEjE,QAAA,EAC+C;IAC/C,MAAMkE,QAAA,GAAW,CAAC,GAAG,KAAK,CAAA1F,aAAA,CAAe2F,MAAA,CAAO,CAAC;IAEjD,IAAIC,MAAA,GAAwD,CAAC;IAE7DF,QAAA,CAASxC,OAAA,CAAS2C,YAAA,IAAiB;MACjC,IAAIxG,eAAA,CAAgBmC,QAAA,EAAUqE,YAAA,CAAarE,QAAQ,GAAG;QACpDoE,MAAA,GAAS;UAAE,GAAGA,MAAA;UAAQ,GAAGC,YAAA,CAAa9F;QAAe;MACvD;IACF,CAAC;IACD,OAAO6F,MAAA;EACT;EAEAE,oBACEC,WAAA,EACAlE,OAAA,EACM;IACN,KAAK,CAAA5B,gBAAA,CAAkBuF,GAAA,CAAItG,OAAA,CAAQ6G,WAAW,GAAG;MAC/CA,WAAA;MACAhG,cAAA,EAAgB8B;IAClB,CAAC;EACH;EAEAmE,oBACED,WAAA,EAC6C;IAC7C,MAAML,QAAA,GAAW,CAAC,GAAG,KAAK,CAAAzF,gBAAA,CAAkB0F,MAAA,CAAO,CAAC;IAEpD,IAAIC,MAAA,GAAsD,CAAC;IAE3DF,QAAA,CAASxC,OAAA,CAAS2C,YAAA,IAAiB;MACjC,IAAIxG,eAAA,CAAgB0G,WAAA,EAAaF,YAAA,CAAaE,WAAW,GAAG;QAC1DH,MAAA,GAAS;UAAE,GAAGA,MAAA;UAAQ,GAAGC,YAAA,CAAa9F;QAAe;MACvD;IACF,CAAC;IAED,OAAO6F,MAAA;EACT;EAEAlD,oBAQEb,OAAA,EAsBA;IACA,IAAIA,OAAA,EAASoE,UAAA,EAAY;MACvB,OAAOpE,OAAA;IAOT;IAEA,MAAMY,gBAAA,GAAmB;MACvB,GAAG,KAAK,CAAA1C,cAAA,CAAgBmG,OAAA;MACxB,IAAIrE,OAAA,EAASL,QAAA,IAAY,KAAKiE,gBAAA,CAAiB5D,OAAA,CAAQL,QAAQ;MAC/D,GAAGK,OAAA;MACHoE,UAAA,EAAY;IACd;IAEA,IAAI,CAACxD,gBAAA,CAAiB0D,SAAA,EAAW;MAC/B1D,gBAAA,CAAiB0D,SAAA,GAAYhH,qBAAA,CAC3BsD,gBAAA,CAAiBjB,QAAA,EACjBiB,gBACF;IACF;IAGA,IAAI,OAAOA,gBAAA,CAAiB2D,kBAAA,KAAuB,aAAa;MAC9D3D,gBAAA,CAAiB2D,kBAAA,GACf3D,gBAAA,CAAiB4D,WAAA,KAAgB;IACrC;IACA,IAAI,OAAO5D,gBAAA,CAAiBkC,YAAA,KAAiB,aAAa;MACxDlC,gBAAA,CAAiBkC,YAAA,GAAe,CAAC,CAAClC,gBAAA,CAAiB6D,QAAA;IACrD;IAEA,IACE,OAAO7D,gBAAA,CAAiB4D,WAAA,KAAgB,eACxC5D,gBAAA,CAAiB8D,SAAA,EACjB;MACA9D,gBAAA,CAAiB4D,WAAA,GAAc;IACjC;IAEA,OAAO5D,gBAAA;EAOT;EAEA+D,uBACE3E,OAAA,EACG;IACH,IAAIA,OAAA,EAASoE,UAAA,EAAY;MACvB,OAAOpE,OAAA;IACT;IACA,OAAO;MACL,GAAG,KAAK,CAAA9B,cAAA,CAAgB0G,SAAA;MACxB,IAAI5E,OAAA,EAASkE,WAAA,IACX,KAAKC,mBAAA,CAAoBnE,OAAA,CAAQkE,WAAW;MAC9C,GAAGlE,OAAA;MACHoE,UAAA,EAAY;IACd;EACF;EAEAS,MAAA,EAAc;IACZ,KAAK,CAAA7G,UAAA,CAAY6G,KAAA,CAAM;IACvB,KAAK,CAAA5G,aAAA,CAAe4G,KAAA,CAAM;EAC5B;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}