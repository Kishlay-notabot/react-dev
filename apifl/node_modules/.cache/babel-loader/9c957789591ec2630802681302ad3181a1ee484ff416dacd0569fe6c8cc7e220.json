{"ast":null,"code":"// src/queriesObserver.ts\nimport { notifyManager } from \"./notifyManager.js\";\nimport { QueryObserver } from \"./queryObserver.js\";\nimport { Subscribable } from \"./subscribable.js\";\nimport { replaceEqualDeep } from \"./utils.js\";\nfunction difference(array1, array2) {\n  return array1.filter(x => !array2.includes(x));\n}\nfunction replaceAt(array, index, value) {\n  const copy = array.slice(0);\n  copy[index] = value;\n  return copy;\n}\nvar QueriesObserver = class extends Subscribable {\n  #client;\n  #result;\n  #queries;\n  #observers;\n  #options;\n  #combinedResult;\n  constructor(client, queries, options) {\n    super();\n    this.#client = client;\n    this.#queries = queries;\n    this.#options = options;\n    this.#observers = [];\n    this.#setResult([]);\n    this.setQueries(queries, options);\n  }\n  #setResult(value) {\n    this.#result = value;\n    this.#combinedResult = this.#combineResult(value);\n  }\n  onSubscribe() {\n    if (this.listeners.size === 1) {\n      this.#observers.forEach(observer => {\n        observer.subscribe(result => {\n          this.#onUpdate(observer, result);\n        });\n      });\n    }\n  }\n  onUnsubscribe() {\n    if (!this.listeners.size) {\n      this.destroy();\n    }\n  }\n  destroy() {\n    this.listeners = /* @__PURE__ */new Set();\n    this.#observers.forEach(observer => {\n      observer.destroy();\n    });\n  }\n  setQueries(queries, options, notifyOptions) {\n    this.#queries = queries;\n    this.#options = options;\n    notifyManager.batch(() => {\n      const prevObservers = this.#observers;\n      const newObserverMatches = this.#findMatchingObservers(this.#queries);\n      newObserverMatches.forEach(match => match.observer.setOptions(match.defaultedQueryOptions, notifyOptions));\n      const newObservers = newObserverMatches.map(match => match.observer);\n      const newResult = newObservers.map(observer => observer.getCurrentResult());\n      const hasIndexChange = newObservers.some((observer, index) => observer !== prevObservers[index]);\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return;\n      }\n      this.#observers = newObservers;\n      this.#setResult(newResult);\n      if (!this.hasListeners()) {\n        return;\n      }\n      difference(prevObservers, newObservers).forEach(observer => {\n        observer.destroy();\n      });\n      difference(newObservers, prevObservers).forEach(observer => {\n        observer.subscribe(result => {\n          this.#onUpdate(observer, result);\n        });\n      });\n      this.#notify();\n    });\n  }\n  getCurrentResult() {\n    return this.#combinedResult;\n  }\n  getQueries() {\n    return this.#observers.map(observer => observer.getCurrentQuery());\n  }\n  getObservers() {\n    return this.#observers;\n  }\n  getOptimisticResult(queries) {\n    const matches = this.#findMatchingObservers(queries);\n    const result = matches.map(match => match.observer.getOptimisticResult(match.defaultedQueryOptions));\n    return [result, r => {\n      return this.#combineResult(r ?? result);\n    }, () => {\n      return matches.map((match, index) => {\n        const observerResult = result[index];\n        return !match.defaultedQueryOptions.notifyOnChangeProps ? match.observer.trackResult(observerResult) : observerResult;\n      });\n    }];\n  }\n  #combineResult(input) {\n    const combine = this.#options?.combine;\n    if (combine) {\n      return replaceEqualDeep(this.#combinedResult, combine(input));\n    }\n    return input;\n  }\n  #findMatchingObservers(queries) {\n    const prevObservers = this.#observers;\n    const prevObserversMap = new Map(prevObservers.map(observer => [observer.options.queryHash, observer]));\n    const defaultedQueryOptions = queries.map(options => this.#client.defaultQueryOptions(options));\n    const matchingObservers = defaultedQueryOptions.flatMap(defaultedOptions => {\n      const match = prevObserversMap.get(defaultedOptions.queryHash);\n      if (match != null) {\n        return [{\n          defaultedQueryOptions: defaultedOptions,\n          observer: match\n        }];\n      }\n      return [];\n    });\n    const matchedQueryHashes = new Set(matchingObservers.map(match => match.defaultedQueryOptions.queryHash));\n    const unmatchedQueries = defaultedQueryOptions.filter(defaultedOptions => !matchedQueryHashes.has(defaultedOptions.queryHash));\n    const getObserver = options => {\n      const defaultedOptions = this.#client.defaultQueryOptions(options);\n      const currentObserver = this.#observers.find(o => o.options.queryHash === defaultedOptions.queryHash);\n      return currentObserver ?? new QueryObserver(this.#client, defaultedOptions);\n    };\n    const newOrReusedObservers = unmatchedQueries.map(options => {\n      return {\n        defaultedQueryOptions: options,\n        observer: getObserver(options)\n      };\n    });\n    const sortMatchesByOrderOfQueries = (a, b) => defaultedQueryOptions.indexOf(a.defaultedQueryOptions) - defaultedQueryOptions.indexOf(b.defaultedQueryOptions);\n    return matchingObservers.concat(newOrReusedObservers).sort(sortMatchesByOrderOfQueries);\n  }\n  #onUpdate(observer, result) {\n    const index = this.#observers.indexOf(observer);\n    if (index !== -1) {\n      this.#setResult(replaceAt(this.#result, index, result));\n      this.#notify();\n    }\n  }\n  #notify() {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(this.#result);\n      });\n    });\n  }\n};\nexport { QueriesObserver };","map":{"version":3,"names":["notifyManager","QueryObserver","Subscribable","replaceEqualDeep","difference","array1","array2","filter","x","includes","replaceAt","array","index","value","copy","slice","QueriesObserver","client","result","queries","observers","options","combinedResult","constructor","setResult","setQueries","#setResult","combineResult","onSubscribe","listeners","size","forEach","observer","subscribe","onUpdate","onUnsubscribe","destroy","Set","notifyOptions","batch","prevObservers","newObserverMatches","findMatchingObservers","match","setOptions","defaultedQueryOptions","newObservers","map","newResult","getCurrentResult","hasIndexChange","some","length","hasListeners","notify","getQueries","getCurrentQuery","getObservers","getOptimisticResult","matches","r","observerResult","notifyOnChangeProps","trackResult","#combineResult","input","combine","#findMatchingObservers","prevObserversMap","Map","queryHash","defaultQueryOptions","matchingObservers","flatMap","defaultedOptions","get","matchedQueryHashes","unmatchedQueries","has","getObserver","currentObserver","find","o","newOrReusedObservers","sortMatchesByOrderOfQueries","a","b","indexOf","concat","sort","#onUpdate","#notify","listener"],"sources":["C:\\Users\\kishl\\Downloads\\code_oin\\apifl\\node_modules\\@tanstack\\query-core\\src\\queriesObserver.ts"],"sourcesContent":["import { notifyManager } from './notifyManager'\nimport { QueryObserver } from './queryObserver'\nimport { Subscribable } from './subscribable'\nimport { replaceEqualDeep } from './utils'\nimport type {\n  DefaultedQueryObserverOptions,\n  QueryObserverOptions,\n  QueryObserverResult,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { NotifyOptions } from './queryObserver'\n\nfunction difference<T>(array1: Array<T>, array2: Array<T>): Array<T> {\n  return array1.filter((x) => !array2.includes(x))\n}\n\nfunction replaceAt<T>(array: Array<T>, index: number, value: T): Array<T> {\n  const copy = array.slice(0)\n  copy[index] = value\n  return copy\n}\n\ntype QueriesObserverListener = (result: Array<QueryObserverResult>) => void\n\nexport interface QueriesObserverOptions<\n  TCombinedResult = Array<QueryObserverResult>,\n> {\n  combine?: (result: Array<QueryObserverResult>) => TCombinedResult\n}\n\nexport class QueriesObserver<\n  TCombinedResult = Array<QueryObserverResult>,\n> extends Subscribable<QueriesObserverListener> {\n  #client: QueryClient\n  #result!: Array<QueryObserverResult>\n  #queries: Array<QueryObserverOptions>\n  #observers: Array<QueryObserver>\n  #options?: QueriesObserverOptions<TCombinedResult>\n  #combinedResult!: TCombinedResult\n\n  constructor(\n    client: QueryClient,\n    queries: Array<QueryObserverOptions>,\n    options?: QueriesObserverOptions<TCombinedResult>,\n  ) {\n    super()\n\n    this.#client = client\n    this.#queries = queries\n    this.#options = options\n    this.#observers = []\n\n    this.#setResult([])\n    this.setQueries(queries, options)\n  }\n\n  #setResult(value: Array<QueryObserverResult>) {\n    this.#result = value\n    this.#combinedResult = this.#combineResult(value)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.#observers.forEach((observer) => {\n        observer.subscribe((result) => {\n          this.#onUpdate(observer, result)\n        })\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.size) {\n      this.destroy()\n    }\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.#observers.forEach((observer) => {\n      observer.destroy()\n    })\n  }\n\n  setQueries(\n    queries: Array<QueryObserverOptions>,\n    options?: QueriesObserverOptions<TCombinedResult>,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    this.#queries = queries\n    this.#options = options\n\n    notifyManager.batch(() => {\n      const prevObservers = this.#observers\n\n      const newObserverMatches = this.#findMatchingObservers(this.#queries)\n\n      // set options for the new observers to notify of changes\n      newObserverMatches.forEach((match) =>\n        match.observer.setOptions(match.defaultedQueryOptions, notifyOptions),\n      )\n\n      const newObservers = newObserverMatches.map((match) => match.observer)\n      const newResult = newObservers.map((observer) =>\n        observer.getCurrentResult(),\n      )\n\n      const hasIndexChange = newObservers.some(\n        (observer, index) => observer !== prevObservers[index],\n      )\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return\n      }\n\n      this.#observers = newObservers\n      this.#setResult(newResult)\n\n      if (!this.hasListeners()) {\n        return\n      }\n\n      difference(prevObservers, newObservers).forEach((observer) => {\n        observer.destroy()\n      })\n\n      difference(newObservers, prevObservers).forEach((observer) => {\n        observer.subscribe((result) => {\n          this.#onUpdate(observer, result)\n        })\n      })\n\n      this.#notify()\n    })\n  }\n\n  getCurrentResult(): TCombinedResult {\n    return this.#combinedResult\n  }\n\n  getQueries() {\n    return this.#observers.map((observer) => observer.getCurrentQuery())\n  }\n\n  getObservers() {\n    return this.#observers\n  }\n\n  getOptimisticResult(\n    queries: Array<QueryObserverOptions>,\n  ): [\n    rawResult: Array<QueryObserverResult>,\n    combineResult: (r?: Array<QueryObserverResult>) => TCombinedResult,\n    trackResult: () => Array<QueryObserverResult>,\n  ] {\n    const matches = this.#findMatchingObservers(queries)\n    const result = matches.map((match) =>\n      match.observer.getOptimisticResult(match.defaultedQueryOptions),\n    )\n\n    return [\n      result,\n      (r?: Array<QueryObserverResult>) => {\n        return this.#combineResult(r ?? result)\n      },\n      () => {\n        return matches.map((match, index) => {\n          const observerResult = result[index]!\n          return !match.defaultedQueryOptions.notifyOnChangeProps\n            ? match.observer.trackResult(observerResult)\n            : observerResult\n        })\n      },\n    ]\n  }\n\n  #combineResult(input: Array<QueryObserverResult>): TCombinedResult {\n    const combine = this.#options?.combine\n    if (combine) {\n      return replaceEqualDeep(this.#combinedResult, combine(input))\n    }\n    return input as any\n  }\n\n  #findMatchingObservers(\n    queries: Array<QueryObserverOptions>,\n  ): Array<QueryObserverMatch> {\n    const prevObservers = this.#observers\n    const prevObserversMap = new Map(\n      prevObservers.map((observer) => [observer.options.queryHash, observer]),\n    )\n\n    const defaultedQueryOptions = queries.map((options) =>\n      this.#client.defaultQueryOptions(options),\n    )\n\n    const matchingObservers: Array<QueryObserverMatch> =\n      defaultedQueryOptions.flatMap((defaultedOptions) => {\n        const match = prevObserversMap.get(defaultedOptions.queryHash)\n        if (match != null) {\n          return [{ defaultedQueryOptions: defaultedOptions, observer: match }]\n        }\n        return []\n      })\n\n    const matchedQueryHashes = new Set(\n      matchingObservers.map((match) => match.defaultedQueryOptions.queryHash),\n    )\n    const unmatchedQueries = defaultedQueryOptions.filter(\n      (defaultedOptions) => !matchedQueryHashes.has(defaultedOptions.queryHash),\n    )\n\n    const getObserver = (options: QueryObserverOptions): QueryObserver => {\n      const defaultedOptions = this.#client.defaultQueryOptions(options)\n      const currentObserver = this.#observers.find(\n        (o) => o.options.queryHash === defaultedOptions.queryHash,\n      )\n      return (\n        currentObserver ?? new QueryObserver(this.#client, defaultedOptions)\n      )\n    }\n\n    const newOrReusedObservers: Array<QueryObserverMatch> =\n      unmatchedQueries.map((options) => {\n        return {\n          defaultedQueryOptions: options,\n          observer: getObserver(options),\n        }\n      })\n\n    const sortMatchesByOrderOfQueries = (\n      a: QueryObserverMatch,\n      b: QueryObserverMatch,\n    ): number =>\n      defaultedQueryOptions.indexOf(a.defaultedQueryOptions) -\n      defaultedQueryOptions.indexOf(b.defaultedQueryOptions)\n\n    return matchingObservers\n      .concat(newOrReusedObservers)\n      .sort(sortMatchesByOrderOfQueries)\n  }\n\n  #onUpdate(observer: QueryObserver, result: QueryObserverResult): void {\n    const index = this.#observers.indexOf(observer)\n    if (index !== -1) {\n      this.#setResult(replaceAt(this.#result, index, result))\n      this.#notify()\n    }\n  }\n\n  #notify(): void {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(this.#result)\n      })\n    })\n  }\n}\n\ntype QueryObserverMatch = {\n  defaultedQueryOptions: DefaultedQueryObserverOptions\n  observer: QueryObserver\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}