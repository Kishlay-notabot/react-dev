{"ast":null,"code":"// src/infiniteQueryObserver.ts\nimport { QueryObserver } from \"./queryObserver.js\";\nimport { hasNextPage, hasPreviousPage, infiniteQueryBehavior } from \"./infiniteQueryBehavior.js\";\nvar InfiniteQueryObserver = class extends QueryObserver {\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(client, options) {\n    super(client, options);\n  }\n  bindMethods() {\n    super.bindMethods();\n    this.fetchNextPage = this.fetchNextPage.bind(this);\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this);\n  }\n  setOptions(options, notifyOptions) {\n    super.setOptions({\n      ...options,\n      behavior: infiniteQueryBehavior()\n    }, notifyOptions);\n  }\n  getOptimisticResult(options) {\n    options.behavior = infiniteQueryBehavior();\n    return super.getOptimisticResult(options);\n  }\n  fetchNextPage(options) {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: {\n          direction: \"forward\"\n        }\n      }\n    });\n  }\n  fetchPreviousPage(options) {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: {\n          direction: \"backward\"\n        }\n      }\n    });\n  }\n  createResult(query, options) {\n    const {\n      state\n    } = query;\n    const result = super.createResult(query, options);\n    const {\n      isFetching,\n      isRefetching\n    } = result;\n    const isFetchingNextPage = isFetching && state.fetchMeta?.fetchMore?.direction === \"forward\";\n    const isFetchingPreviousPage = isFetching && state.fetchMeta?.fetchMore?.direction === \"backward\";\n    return {\n      ...result,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, state.data),\n      hasPreviousPage: hasPreviousPage(options, state.data),\n      isFetchingNextPage,\n      isFetchingPreviousPage,\n      isRefetching: isRefetching && !isFetchingNextPage && !isFetchingPreviousPage\n    };\n  }\n};\nexport { InfiniteQueryObserver };","map":{"version":3,"names":["QueryObserver","hasNextPage","hasPreviousPage","infiniteQueryBehavior","InfiniteQueryObserver","constructor","client","options","bindMethods","fetchNextPage","bind","fetchPreviousPage","setOptions","notifyOptions","behavior","getOptimisticResult","fetch","meta","fetchMore","direction","createResult","query","state","result","isFetching","isRefetching","isFetchingNextPage","fetchMeta","isFetchingPreviousPage","data"],"sources":["C:\\Users\\kishl\\Downloads\\code_oin\\apifl\\node_modules\\@tanstack\\query-core\\src\\infiniteQueryObserver.ts"],"sourcesContent":["import { QueryObserver } from './queryObserver'\nimport {\n  hasNextPage,\n  hasPreviousPage,\n  infiniteQueryBehavior,\n} from './infiniteQueryBehavior'\nimport type {\n  DefaultError,\n  DefaultedInfiniteQueryObserverOptions,\n  FetchNextPageOptions,\n  FetchPreviousPageOptions,\n  InfiniteData,\n  InfiniteQueryObserverOptions,\n  InfiniteQueryObserverResult,\n  QueryKey,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { NotifyOptions, ObserverFetchOptions } from './queryObserver'\nimport type { Query } from './query'\n\ntype InfiniteQueryObserverListener<TData, TError> = (\n  result: InfiniteQueryObserverResult<TData, TError>,\n) => void\n\nexport class InfiniteQueryObserver<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n> extends QueryObserver<\n  TQueryFnData,\n  TError,\n  TData,\n  InfiniteData<TQueryData, TPageParam>,\n  TQueryKey\n> {\n  // Type override\n  subscribe!: (\n    listener?: InfiniteQueryObserverListener<TData, TError>,\n  ) => () => void\n\n  // Type override\n  getCurrentResult!: () => InfiniteQueryObserverResult<TData, TError>\n\n  // Type override\n  protected fetch!: (\n    fetchOptions: ObserverFetchOptions,\n  ) => Promise<InfiniteQueryObserverResult<TData, TError>>\n\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(\n    client: QueryClient,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey,\n      TPageParam\n    >,\n  ) {\n    super(client, options)\n  }\n\n  protected bindMethods(): void {\n    super.bindMethods()\n    this.fetchNextPage = this.fetchNextPage.bind(this)\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this)\n  }\n\n  setOptions(\n    options?: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey,\n      TPageParam\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    super.setOptions(\n      {\n        ...options,\n        behavior: infiniteQueryBehavior(),\n      },\n      notifyOptions,\n    )\n  }\n\n  getOptimisticResult(\n    options: DefaultedInfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): InfiniteQueryObserverResult<TData, TError> {\n    options.behavior = infiniteQueryBehavior()\n    return super.getOptimisticResult(options) as InfiniteQueryObserverResult<\n      TData,\n      TError\n    >\n  }\n\n  fetchNextPage(\n    options?: FetchNextPageOptions,\n  ): Promise<InfiniteQueryObserverResult<TData, TError>> {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'forward' },\n      },\n    })\n  }\n\n  fetchPreviousPage(\n    options?: FetchPreviousPageOptions,\n  ): Promise<InfiniteQueryObserverResult<TData, TError>> {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'backward' },\n      },\n    })\n  }\n\n  protected createResult(\n    query: Query<\n      TQueryFnData,\n      TError,\n      InfiniteData<TQueryData, TPageParam>,\n      TQueryKey\n    >,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): InfiniteQueryObserverResult<TData, TError> {\n    const { state } = query\n    const result = super.createResult(query, options)\n\n    const { isFetching, isRefetching } = result\n\n    const isFetchingNextPage =\n      isFetching && state.fetchMeta?.fetchMore?.direction === 'forward'\n\n    const isFetchingPreviousPage =\n      isFetching && state.fetchMeta?.fetchMore?.direction === 'backward'\n\n    return {\n      ...result,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, state.data),\n      hasPreviousPage: hasPreviousPage(options, state.data),\n      isFetchingNextPage,\n      isFetchingPreviousPage,\n      isRefetching:\n        isRefetching && !isFetchingNextPage && !isFetchingPreviousPage,\n    }\n  }\n}\n"],"mappings":";AAAA,SAASA,aAAA,QAAqB;AAC9B,SACEC,WAAA,EACAC,eAAA,EACAC,qBAAA,QACK;AAmBA,IAAMC,qBAAA,GAAN,cAOGJ,aAAA,CAMR;EAAA;EAeAK,YACEC,MAAA,EACAC,OAAA,EAQA;IACA,MAAMD,MAAA,EAAQC,OAAO;EACvB;EAEUC,YAAA,EAAoB;IAC5B,MAAMA,WAAA,CAAY;IAClB,KAAKC,aAAA,GAAgB,KAAKA,aAAA,CAAcC,IAAA,CAAK,IAAI;IACjD,KAAKC,iBAAA,GAAoB,KAAKA,iBAAA,CAAkBD,IAAA,CAAK,IAAI;EAC3D;EAEAE,WACEL,OAAA,EAQAM,aAAA,EACM;IACN,MAAMD,UAAA,CACJ;MACE,GAAGL,OAAA;MACHO,QAAA,EAAUX,qBAAA,CAAsB;IAClC,GACAU,aACF;EACF;EAEAE,oBACER,OAAA,EAQ4C;IAC5CA,OAAA,CAAQO,QAAA,GAAWX,qBAAA,CAAsB;IACzC,OAAO,MAAMY,mBAAA,CAAoBR,OAAO;EAI1C;EAEAE,cACEF,OAAA,EACqD;IACrD,OAAO,KAAKS,KAAA,CAAM;MAChB,GAAGT,OAAA;MACHU,IAAA,EAAM;QACJC,SAAA,EAAW;UAAEC,SAAA,EAAW;QAAU;MACpC;IACF,CAAC;EACH;EAEAR,kBACEJ,OAAA,EACqD;IACrD,OAAO,KAAKS,KAAA,CAAM;MAChB,GAAGT,OAAA;MACHU,IAAA,EAAM;QACJC,SAAA,EAAW;UAAEC,SAAA,EAAW;QAAW;MACrC;IACF,CAAC;EACH;EAEUC,aACRC,KAAA,EAMAd,OAAA,EAQ4C;IAC5C,MAAM;MAAEe;IAAM,IAAID,KAAA;IAClB,MAAME,MAAA,GAAS,MAAMH,YAAA,CAAaC,KAAA,EAAOd,OAAO;IAEhD,MAAM;MAAEiB,UAAA;MAAYC;IAAa,IAAIF,MAAA;IAErC,MAAMG,kBAAA,GACJF,UAAA,IAAcF,KAAA,CAAMK,SAAA,EAAWT,SAAA,EAAWC,SAAA,KAAc;IAE1D,MAAMS,sBAAA,GACJJ,UAAA,IAAcF,KAAA,CAAMK,SAAA,EAAWT,SAAA,EAAWC,SAAA,KAAc;IAE1D,OAAO;MACL,GAAGI,MAAA;MACHd,aAAA,EAAe,KAAKA,aAAA;MACpBE,iBAAA,EAAmB,KAAKA,iBAAA;MACxBV,WAAA,EAAaA,WAAA,CAAYM,OAAA,EAASe,KAAA,CAAMO,IAAI;MAC5C3B,eAAA,EAAiBA,eAAA,CAAgBK,OAAA,EAASe,KAAA,CAAMO,IAAI;MACpDH,kBAAA;MACAE,sBAAA;MACAH,YAAA,EACEA,YAAA,IAAgB,CAACC,kBAAA,IAAsB,CAACE;IAC5C;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}