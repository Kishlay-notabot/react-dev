{"ast":null,"code":"// src/mutationCache.ts\nimport { notifyManager } from \"./notifyManager.js\";\nimport { Mutation } from \"./mutation.js\";\nimport { matchMutation, noop } from \"./utils.js\";\nimport { Subscribable } from \"./subscribable.js\";\nvar MutationCache = class extends Subscribable {\n  constructor(config = {}) {\n    super();\n    this.config = config;\n    this.#mutations = [];\n    this.#mutationId = 0;\n  }\n  #mutations;\n  #mutationId;\n  #resuming;\n  build(client, options, state) {\n    const mutation = new Mutation({\n      mutationCache: this,\n      mutationId: ++this.#mutationId,\n      options: client.defaultMutationOptions(options),\n      state\n    });\n    this.add(mutation);\n    return mutation;\n  }\n  add(mutation) {\n    this.#mutations.push(mutation);\n    this.notify({\n      type: \"added\",\n      mutation\n    });\n  }\n  remove(mutation) {\n    this.#mutations = this.#mutations.filter(x => x !== mutation);\n    this.notify({\n      type: \"removed\",\n      mutation\n    });\n  }\n  clear() {\n    notifyManager.batch(() => {\n      this.#mutations.forEach(mutation => {\n        this.remove(mutation);\n      });\n    });\n  }\n  getAll() {\n    return this.#mutations;\n  }\n  find(filters) {\n    const defaultedFilters = {\n      exact: true,\n      ...filters\n    };\n    return this.#mutations.find(mutation => matchMutation(defaultedFilters, mutation));\n  }\n  findAll(filters = {}) {\n    return this.#mutations.filter(mutation => matchMutation(filters, mutation));\n  }\n  notify(event) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(event);\n      });\n    });\n  }\n  resumePausedMutations() {\n    this.#resuming = (this.#resuming ?? Promise.resolve()).then(() => {\n      const pausedMutations = this.#mutations.filter(x => x.state.isPaused);\n      return notifyManager.batch(() => pausedMutations.reduce((promise, mutation) => promise.then(() => mutation.continue().catch(noop)), Promise.resolve()));\n    }).then(() => {\n      this.#resuming = void 0;\n    });\n    return this.#resuming;\n  }\n};\nexport { MutationCache };","map":{"version":3,"names":["notifyManager","Mutation","matchMutation","noop","Subscribable","MutationCache","constructor","config","mutations","mutationId","resuming","build","client","options","state","mutation","mutationCache","defaultMutationOptions","add","push","notify","type","remove","filter","x","clear","batch","forEach","getAll","find","filters","defaultedFilters","exact","findAll","event","listeners","listener","resumePausedMutations","Promise","resolve","then","pausedMutations","isPaused","reduce","promise","continue","catch"],"sources":["C:\\Users\\kishl\\Downloads\\code_oin\\node_modules\\@tanstack\\query-core\\src\\mutationCache.ts"],"sourcesContent":["import { notifyManager } from './notifyManager'\nimport { Mutation } from './mutation'\nimport { matchMutation, noop } from './utils'\nimport { Subscribable } from './subscribable'\nimport type { MutationObserver } from './mutationObserver'\nimport type { DefaultError, MutationOptions, NotifyEvent } from './types'\nimport type { QueryClient } from './queryClient'\nimport type { Action, MutationState } from './mutation'\nimport type { MutationFilters } from './utils'\n\n// TYPES\n\ninterface MutationCacheConfig {\n  onError?: (\n    error: DefaultError,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n  onSuccess?: (\n    data: unknown,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n  onMutate?: (\n    variables: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n  onSettled?: (\n    data: unknown | undefined,\n    error: DefaultError | null,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n}\n\ninterface NotifyEventMutationAdded extends NotifyEvent {\n  type: 'added'\n  mutation: Mutation<any, any, any, any>\n}\ninterface NotifyEventMutationRemoved extends NotifyEvent {\n  type: 'removed'\n  mutation: Mutation<any, any, any, any>\n}\n\ninterface NotifyEventMutationObserverAdded extends NotifyEvent {\n  type: 'observerAdded'\n  mutation: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any>\n}\n\ninterface NotifyEventMutationObserverRemoved extends NotifyEvent {\n  type: 'observerRemoved'\n  mutation: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any>\n}\n\ninterface NotifyEventMutationObserverOptionsUpdated extends NotifyEvent {\n  type: 'observerOptionsUpdated'\n  mutation?: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any, any>\n}\n\ninterface NotifyEventMutationUpdated extends NotifyEvent {\n  type: 'updated'\n  mutation: Mutation<any, any, any, any>\n  action: Action<any, any, any, any>\n}\n\ntype MutationCacheNotifyEvent =\n  | NotifyEventMutationAdded\n  | NotifyEventMutationRemoved\n  | NotifyEventMutationObserverAdded\n  | NotifyEventMutationObserverRemoved\n  | NotifyEventMutationObserverOptionsUpdated\n  | NotifyEventMutationUpdated\n\ntype MutationCacheListener = (event: MutationCacheNotifyEvent) => void\n\n// CLASS\n\nexport class MutationCache extends Subscribable<MutationCacheListener> {\n  #mutations: Array<Mutation<any, any, any, any>>\n  #mutationId: number\n  #resuming: Promise<unknown> | undefined\n\n  constructor(public config: MutationCacheConfig = {}) {\n    super()\n    this.#mutations = []\n    this.#mutationId = 0\n  }\n\n  build<TData, TError, TVariables, TContext>(\n    client: QueryClient,\n    options: MutationOptions<TData, TError, TVariables, TContext>,\n    state?: MutationState<TData, TError, TVariables, TContext>,\n  ): Mutation<TData, TError, TVariables, TContext> {\n    const mutation = new Mutation({\n      mutationCache: this,\n      mutationId: ++this.#mutationId,\n      options: client.defaultMutationOptions(options),\n      state,\n    })\n\n    this.add(mutation)\n\n    return mutation\n  }\n\n  add(mutation: Mutation<any, any, any, any>): void {\n    this.#mutations.push(mutation)\n    this.notify({ type: 'added', mutation })\n  }\n\n  remove(mutation: Mutation<any, any, any, any>): void {\n    this.#mutations = this.#mutations.filter((x) => x !== mutation)\n    this.notify({ type: 'removed', mutation })\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.#mutations.forEach((mutation) => {\n        this.remove(mutation)\n      })\n    })\n  }\n\n  getAll(): Array<Mutation> {\n    return this.#mutations\n  }\n\n  find<\n    TData = unknown,\n    TError = DefaultError,\n    TVariables = any,\n    TContext = unknown,\n  >(\n    filters: MutationFilters,\n  ): Mutation<TData, TError, TVariables, TContext> | undefined {\n    const defaultedFilters = { exact: true, ...filters }\n\n    return this.#mutations.find((mutation) =>\n      matchMutation(defaultedFilters, mutation),\n    )\n  }\n\n  findAll(filters: MutationFilters = {}): Array<Mutation> {\n    return this.#mutations.filter((mutation) =>\n      matchMutation(filters, mutation),\n    )\n  }\n\n  notify(event: MutationCacheNotifyEvent) {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(event)\n      })\n    })\n  }\n\n  resumePausedMutations(): Promise<unknown> {\n    this.#resuming = (this.#resuming ?? Promise.resolve())\n      .then(() => {\n        const pausedMutations = this.#mutations.filter((x) => x.state.isPaused)\n        return notifyManager.batch(() =>\n          pausedMutations.reduce(\n            (promise, mutation) =>\n              promise.then(() => mutation.continue().catch(noop)),\n            Promise.resolve() as Promise<unknown>,\n          ),\n        )\n      })\n      .then(() => {\n        this.#resuming = undefined\n      })\n\n    return this.#resuming\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}