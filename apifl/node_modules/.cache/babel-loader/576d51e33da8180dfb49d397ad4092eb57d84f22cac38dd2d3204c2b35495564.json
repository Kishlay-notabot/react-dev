{"ast":null,"code":"// src/retryer.ts\nimport { focusManager } from \"./focusManager.js\";\nimport { onlineManager } from \"./onlineManager.js\";\nimport { isServer, sleep } from \"./utils.js\";\nfunction defaultRetryDelay(failureCount) {\n  return Math.min(1e3 * 2 ** failureCount, 3e4);\n}\nfunction canFetch(networkMode) {\n  return (networkMode ?? \"online\") === \"online\" ? onlineManager.isOnline() : true;\n}\nvar CancelledError = class {\n  constructor(options) {\n    this.revert = options?.revert;\n    this.silent = options?.silent;\n  }\n};\nfunction isCancelledError(value) {\n  return value instanceof CancelledError;\n}\nfunction createRetryer(config) {\n  let isRetryCancelled = false;\n  let failureCount = 0;\n  let isResolved = false;\n  let continueFn;\n  let promiseResolve;\n  let promiseReject;\n  const promise = new Promise((outerResolve, outerReject) => {\n    promiseResolve = outerResolve;\n    promiseReject = outerReject;\n  });\n  const cancel = cancelOptions => {\n    if (!isResolved) {\n      reject(new CancelledError(cancelOptions));\n      config.abort?.();\n    }\n  };\n  const cancelRetry = () => {\n    isRetryCancelled = true;\n  };\n  const continueRetry = () => {\n    isRetryCancelled = false;\n  };\n  const shouldPause = () => !focusManager.isFocused() || config.networkMode !== \"always\" && !onlineManager.isOnline();\n  const resolve = value => {\n    if (!isResolved) {\n      isResolved = true;\n      config.onSuccess?.(value);\n      continueFn?.();\n      promiseResolve(value);\n    }\n  };\n  const reject = value => {\n    if (!isResolved) {\n      isResolved = true;\n      config.onError?.(value);\n      continueFn?.();\n      promiseReject(value);\n    }\n  };\n  const pause = () => {\n    return new Promise(continueResolve => {\n      continueFn = value => {\n        const canContinue = isResolved || !shouldPause();\n        if (canContinue) {\n          continueResolve(value);\n        }\n        return canContinue;\n      };\n      config.onPause?.();\n    }).then(() => {\n      continueFn = void 0;\n      if (!isResolved) {\n        config.onContinue?.();\n      }\n    });\n  };\n  const run = () => {\n    if (isResolved) {\n      return;\n    }\n    let promiseOrValue;\n    try {\n      promiseOrValue = config.fn();\n    } catch (error) {\n      promiseOrValue = Promise.reject(error);\n    }\n    Promise.resolve(promiseOrValue).then(resolve).catch(error => {\n      if (isResolved) {\n        return;\n      }\n      const retry = config.retry ?? (isServer ? 0 : 3);\n      const retryDelay = config.retryDelay ?? defaultRetryDelay;\n      const delay = typeof retryDelay === \"function\" ? retryDelay(failureCount, error) : retryDelay;\n      const shouldRetry = retry === true || typeof retry === \"number\" && failureCount < retry || typeof retry === \"function\" && retry(failureCount, error);\n      if (isRetryCancelled || !shouldRetry) {\n        reject(error);\n        return;\n      }\n      failureCount++;\n      config.onFail?.(failureCount, error);\n      sleep(delay).then(() => {\n        if (shouldPause()) {\n          return pause();\n        }\n        return;\n      }).then(() => {\n        if (isRetryCancelled) {\n          reject(error);\n        } else {\n          run();\n        }\n      });\n    });\n  };\n  if (canFetch(config.networkMode)) {\n    run();\n  } else {\n    pause().then(run);\n  }\n  return {\n    promise,\n    cancel,\n    continue: () => {\n      const didContinue = continueFn?.();\n      return didContinue ? promise : Promise.resolve();\n    },\n    cancelRetry,\n    continueRetry\n  };\n}\nexport { CancelledError, canFetch, createRetryer, isCancelledError };","map":{"version":3,"names":["focusManager","onlineManager","isServer","sleep","defaultRetryDelay","failureCount","Math","min","canFetch","networkMode","isOnline","CancelledError","constructor","options","revert","silent","isCancelledError","value","createRetryer","config","isRetryCancelled","isResolved","continueFn","promiseResolve","promiseReject","promise","Promise","outerResolve","outerReject","cancel","cancelOptions","reject","abort","cancelRetry","continueRetry","shouldPause","isFocused","resolve","onSuccess","onError","pause","continueResolve","canContinue","onPause","then","onContinue","run","promiseOrValue","fn","error","catch","retry","retryDelay","delay","shouldRetry","onFail","continue","didContinue"],"sources":["C:\\Users\\kishl\\Downloads\\code_oin\\node_modules\\@tanstack\\query-core\\src\\retryer.ts"],"sourcesContent":["import { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { isServer, sleep } from './utils'\nimport type { CancelOptions, DefaultError, NetworkMode } from './types'\n\n// TYPES\n\ninterface RetryerConfig<TData = unknown, TError = DefaultError> {\n  fn: () => TData | Promise<TData>\n  abort?: () => void\n  onError?: (error: TError) => void\n  onSuccess?: (data: TData) => void\n  onFail?: (failureCount: number, error: TError) => void\n  onPause?: () => void\n  onContinue?: () => void\n  retry?: RetryValue<TError>\n  retryDelay?: RetryDelayValue<TError>\n  networkMode: NetworkMode | undefined\n}\n\nexport interface Retryer<TData = unknown> {\n  promise: Promise<TData>\n  cancel: (cancelOptions?: CancelOptions) => void\n  continue: () => Promise<unknown>\n  cancelRetry: () => void\n  continueRetry: () => void\n}\n\nexport type RetryValue<TError> = boolean | number | ShouldRetryFunction<TError>\n\ntype ShouldRetryFunction<TError = DefaultError> = (\n  failureCount: number,\n  error: TError,\n) => boolean\n\nexport type RetryDelayValue<TError> = number | RetryDelayFunction<TError>\n\ntype RetryDelayFunction<TError = DefaultError> = (\n  failureCount: number,\n  error: TError,\n) => number\n\nfunction defaultRetryDelay(failureCount: number) {\n  return Math.min(1000 * 2 ** failureCount, 30000)\n}\n\nexport function canFetch(networkMode: NetworkMode | undefined): boolean {\n  return (networkMode ?? 'online') === 'online'\n    ? onlineManager.isOnline()\n    : true\n}\n\nexport class CancelledError {\n  revert?: boolean\n  silent?: boolean\n  constructor(options?: CancelOptions) {\n    this.revert = options?.revert\n    this.silent = options?.silent\n  }\n}\n\nexport function isCancelledError(value: any): value is CancelledError {\n  return value instanceof CancelledError\n}\n\nexport function createRetryer<TData = unknown, TError = DefaultError>(\n  config: RetryerConfig<TData, TError>,\n): Retryer<TData> {\n  let isRetryCancelled = false\n  let failureCount = 0\n  let isResolved = false\n  let continueFn: ((value?: unknown) => boolean) | undefined\n  let promiseResolve: (data: TData) => void\n  let promiseReject: (error: TError) => void\n\n  const promise = new Promise<TData>((outerResolve, outerReject) => {\n    promiseResolve = outerResolve\n    promiseReject = outerReject\n  })\n\n  const cancel = (cancelOptions?: CancelOptions): void => {\n    if (!isResolved) {\n      reject(new CancelledError(cancelOptions))\n\n      config.abort?.()\n    }\n  }\n  const cancelRetry = () => {\n    isRetryCancelled = true\n  }\n\n  const continueRetry = () => {\n    isRetryCancelled = false\n  }\n\n  const shouldPause = () =>\n    !focusManager.isFocused() ||\n    (config.networkMode !== 'always' && !onlineManager.isOnline())\n\n  const resolve = (value: any) => {\n    if (!isResolved) {\n      isResolved = true\n      config.onSuccess?.(value)\n      continueFn?.()\n      promiseResolve(value)\n    }\n  }\n\n  const reject = (value: any) => {\n    if (!isResolved) {\n      isResolved = true\n      config.onError?.(value)\n      continueFn?.()\n      promiseReject(value)\n    }\n  }\n\n  const pause = () => {\n    return new Promise((continueResolve) => {\n      continueFn = (value) => {\n        const canContinue = isResolved || !shouldPause()\n        if (canContinue) {\n          continueResolve(value)\n        }\n        return canContinue\n      }\n      config.onPause?.()\n    }).then(() => {\n      continueFn = undefined\n      if (!isResolved) {\n        config.onContinue?.()\n      }\n    })\n  }\n\n  // Create loop function\n  const run = () => {\n    // Do nothing if already resolved\n    if (isResolved) {\n      return\n    }\n\n    let promiseOrValue: any\n\n    // Execute query\n    try {\n      promiseOrValue = config.fn()\n    } catch (error) {\n      promiseOrValue = Promise.reject(error)\n    }\n\n    Promise.resolve(promiseOrValue)\n      .then(resolve)\n      .catch((error) => {\n        // Stop if the fetch is already resolved\n        if (isResolved) {\n          return\n        }\n\n        // Do we need to retry the request?\n        const retry = config.retry ?? (isServer ? 0 : 3)\n        const retryDelay = config.retryDelay ?? defaultRetryDelay\n        const delay =\n          typeof retryDelay === 'function'\n            ? retryDelay(failureCount, error)\n            : retryDelay\n        const shouldRetry =\n          retry === true ||\n          (typeof retry === 'number' && failureCount < retry) ||\n          (typeof retry === 'function' && retry(failureCount, error))\n\n        if (isRetryCancelled || !shouldRetry) {\n          // We are done if the query does not need to be retried\n          reject(error)\n          return\n        }\n\n        failureCount++\n\n        // Notify on fail\n        config.onFail?.(failureCount, error)\n\n        // Delay\n        sleep(delay)\n          // Pause if the document is not visible or when the device is offline\n          .then(() => {\n            if (shouldPause()) {\n              return pause()\n            }\n            return\n          })\n          .then(() => {\n            if (isRetryCancelled) {\n              reject(error)\n            } else {\n              run()\n            }\n          })\n      })\n  }\n\n  // Start loop\n  if (canFetch(config.networkMode)) {\n    run()\n  } else {\n    pause().then(run)\n  }\n\n  return {\n    promise,\n    cancel,\n    continue: () => {\n      const didContinue = continueFn?.()\n      return didContinue ? promise : Promise.resolve()\n    },\n    cancelRetry,\n    continueRetry,\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}