{"ast":null,"code":"// src/mutationObserver.ts\nimport { getDefaultState } from \"./mutation.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { Subscribable } from \"./subscribable.js\";\nimport { shallowEqualObjects } from \"./utils.js\";\nvar MutationObserver = class extends Subscribable {\n  constructor(client, options) {\n    super();\n    this.#currentResult = void 0;\n    this.#client = client;\n    this.setOptions(options);\n    this.bindMethods();\n    this.#updateResult();\n  }\n  #client;\n  #currentResult;\n  #currentMutation;\n  #mutateOptions;\n  bindMethods() {\n    this.mutate = this.mutate.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n  setOptions(options) {\n    const prevOptions = this.options;\n    this.options = this.#client.defaultMutationOptions(options);\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.#client.getMutationCache().notify({\n        type: \"observerOptionsUpdated\",\n        mutation: this.#currentMutation,\n        observer: this\n      });\n    }\n    this.#currentMutation?.setOptions(this.options);\n  }\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.#currentMutation?.removeObserver(this);\n    }\n  }\n  onMutationUpdate(action) {\n    this.#updateResult();\n    this.#notify(action);\n  }\n  getCurrentResult() {\n    return this.#currentResult;\n  }\n  reset() {\n    this.#currentMutation = void 0;\n    this.#updateResult();\n    this.#notify();\n  }\n  mutate(variables, options) {\n    this.#mutateOptions = options;\n    this.#currentMutation?.removeObserver(this);\n    this.#currentMutation = this.#client.getMutationCache().build(this.#client, this.options);\n    this.#currentMutation.addObserver(this);\n    return this.#currentMutation.execute(variables);\n  }\n  #updateResult() {\n    const state = this.#currentMutation?.state ?? getDefaultState();\n    this.#currentResult = {\n      ...state,\n      isPending: state.status === \"pending\",\n      isSuccess: state.status === \"success\",\n      isError: state.status === \"error\",\n      isIdle: state.status === \"idle\",\n      mutate: this.mutate,\n      reset: this.reset\n    };\n  }\n  #notify(action) {\n    notifyManager.batch(() => {\n      if (this.#mutateOptions && this.hasListeners()) {\n        if (action?.type === \"success\") {\n          this.#mutateOptions.onSuccess?.(action.data, this.#currentResult.variables, this.#currentResult.context);\n          this.#mutateOptions.onSettled?.(action.data, null, this.#currentResult.variables, this.#currentResult.context);\n        } else if (action?.type === \"error\") {\n          this.#mutateOptions.onError?.(action.error, this.#currentResult.variables, this.#currentResult.context);\n          this.#mutateOptions.onSettled?.(void 0, action.error, this.#currentResult.variables, this.#currentResult.context);\n        }\n      }\n      this.listeners.forEach(listener => {\n        listener(this.#currentResult);\n      });\n    });\n  }\n};\nexport { MutationObserver };","map":{"version":3,"names":["getDefaultState","notifyManager","Subscribable","shallowEqualObjects","MutationObserver","constructor","client","options","currentResult","setOptions","bindMethods","updateResult","currentMutation","mutateOptions","mutate","bind","reset","prevOptions","defaultMutationOptions","getMutationCache","notify","type","mutation","observer","onUnsubscribe","hasListeners","removeObserver","onMutationUpdate","action","getCurrentResult","variables","build","addObserver","execute","#updateResult","state","isPending","status","isSuccess","isError","isIdle","#notify","batch","onSuccess","data","context","onSettled","onError","error","listeners","forEach","listener"],"sources":["C:\\Users\\kishl\\Downloads\\code_oin\\apifl\\node_modules\\@tanstack\\query-core\\src\\mutationObserver.ts"],"sourcesContent":["import { getDefaultState } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport { Subscribable } from './subscribable'\nimport { shallowEqualObjects } from './utils'\nimport type { QueryClient } from './queryClient'\nimport type {\n  DefaultError,\n  MutateOptions,\n  MutationObserverOptions,\n  MutationObserverResult,\n} from './types'\nimport type { Action, Mutation } from './mutation'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>,\n) => void\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  #client: QueryClient\n  #currentResult: MutationObserverResult<TData, TError, TVariables, TContext> =\n    undefined!\n  #currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  #mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    super()\n\n    this.#client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.#updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options?: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    const prevOptions = this.options\n    this.options = this.#client.defaultMutationOptions(options)\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.#client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.#currentMutation,\n        observer: this,\n      })\n    }\n    this.#currentMutation?.setOptions(this.options)\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.#currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.#updateResult()\n\n    this.#notify(action)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.#currentResult\n  }\n\n  reset(): void {\n    this.#currentMutation = undefined\n    this.#updateResult()\n    this.#notify()\n  }\n\n  mutate(\n    variables: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>,\n  ): Promise<TData> {\n    this.#mutateOptions = options\n\n    this.#currentMutation?.removeObserver(this)\n\n    this.#currentMutation = this.#client\n      .getMutationCache()\n      .build(this.#client, this.options)\n\n    this.#currentMutation.addObserver(this)\n\n    return this.#currentMutation.execute(variables)\n  }\n\n  #updateResult(): void {\n    const state =\n      this.#currentMutation?.state ??\n      getDefaultState<TData, TError, TVariables, TContext>()\n\n    this.#currentResult = {\n      ...state,\n      isPending: state.status === 'pending',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    } as MutationObserverResult<TData, TError, TVariables, TContext>\n  }\n\n  #notify(action?: Action<TData, TError, TVariables, TContext>): void {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.#mutateOptions && this.hasListeners()) {\n        if (action?.type === 'success') {\n          this.#mutateOptions.onSuccess?.(\n            action.data,\n            this.#currentResult.variables!,\n            this.#currentResult.context!,\n          )\n          this.#mutateOptions.onSettled?.(\n            action.data,\n            null,\n            this.#currentResult.variables!,\n            this.#currentResult.context,\n          )\n        } else if (action?.type === 'error') {\n          this.#mutateOptions.onError?.(\n            action.error,\n            this.#currentResult.variables!,\n            this.#currentResult.context,\n          )\n          this.#mutateOptions.onSettled?.(\n            undefined,\n            action.error,\n            this.#currentResult.variables!,\n            this.#currentResult.context,\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      this.listeners.forEach((listener) => {\n        listener(this.#currentResult)\n      })\n    })\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}